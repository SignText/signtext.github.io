(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

const colorConvert = require('color-convert');

const wrapAnsi16 = (fn, offset) => function () {
  const code = fn.apply(colorConvert, arguments);
  return `\u001B[${code + offset}m`;
};

const wrapAnsi256 = (fn, offset) => function () {
  const code = fn.apply(colorConvert, arguments);
  return `\u001B[${38 + offset};5;${code}m`;
};

const wrapAnsi16m = (fn, offset) => function () {
  const rgb = fn.apply(colorConvert, arguments);
  return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
};

function assembleStyles() {
  const codes = new Map();
  const styles = {
    modifier: {
      reset: [0, 0],
      // 21 isn't widely supported and 22 does the same thing
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29]
    },
    color: {
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      gray: [90, 39],
      // Bright color
      redBright: [91, 39],
      greenBright: [92, 39],
      yellowBright: [93, 39],
      blueBright: [94, 39],
      magentaBright: [95, 39],
      cyanBright: [96, 39],
      whiteBright: [97, 39]
    },
    bgColor: {
      bgBlack: [40, 49],
      bgRed: [41, 49],
      bgGreen: [42, 49],
      bgYellow: [43, 49],
      bgBlue: [44, 49],
      bgMagenta: [45, 49],
      bgCyan: [46, 49],
      bgWhite: [47, 49],
      // Bright color
      bgBlackBright: [100, 49],
      bgRedBright: [101, 49],
      bgGreenBright: [102, 49],
      bgYellowBright: [103, 49],
      bgBlueBright: [104, 49],
      bgMagentaBright: [105, 49],
      bgCyanBright: [106, 49],
      bgWhiteBright: [107, 49]
    }
  }; // Fix humans

  styles.color.grey = styles.color.gray;

  for (const groupName of Object.keys(styles)) {
    const group = styles[groupName];

    for (const styleName of Object.keys(group)) {
      const style = group[styleName];
      styles[styleName] = {
        open: `\u001B[${style[0]}m`,
        close: `\u001B[${style[1]}m`
      };
      group[styleName] = styles[styleName];
      codes.set(style[0], style[1]);
    }

    Object.defineProperty(styles, groupName, {
      value: group,
      enumerable: false
    });
    Object.defineProperty(styles, 'codes', {
      value: codes,
      enumerable: false
    });
  }

  const ansi2ansi = n => n;

  const rgb2rgb = (r, g, b) => [r, g, b];

  styles.color.close = '\u001B[39m';
  styles.bgColor.close = '\u001B[49m';
  styles.color.ansi = {
    ansi: wrapAnsi16(ansi2ansi, 0)
  };
  styles.color.ansi256 = {
    ansi256: wrapAnsi256(ansi2ansi, 0)
  };
  styles.color.ansi16m = {
    rgb: wrapAnsi16m(rgb2rgb, 0)
  };
  styles.bgColor.ansi = {
    ansi: wrapAnsi16(ansi2ansi, 10)
  };
  styles.bgColor.ansi256 = {
    ansi256: wrapAnsi256(ansi2ansi, 10)
  };
  styles.bgColor.ansi16m = {
    rgb: wrapAnsi16m(rgb2rgb, 10)
  };

  for (let key of Object.keys(colorConvert)) {
    if (typeof colorConvert[key] !== 'object') {
      continue;
    }

    const suite = colorConvert[key];

    if (key === 'ansi16') {
      key = 'ansi';
    }

    if ('ansi16' in suite) {
      styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
      styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
    }

    if ('ansi256' in suite) {
      styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
      styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
    }

    if ('rgb' in suite) {
      styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
      styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
    }
  }

  return styles;
} // Make the export immutable


Object.defineProperty(module, 'exports', {
  enumerable: true,
  get: assembleStyles
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"color-convert":7}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Mutex =
/** @class */
function () {
  function Mutex() {
    this._queue = [];
    this._pending = false;
  }

  Mutex.prototype.isLocked = function () {
    return this._pending;
  };

  Mutex.prototype.acquire = function () {
    var _this = this;

    var ticket = new Promise(function (resolve) {
      return _this._queue.push(resolve);
    });

    if (!this._pending) {
      this._dispatchNext();
    }

    return ticket;
  };

  Mutex.prototype.runExclusive = function (callback) {
    return this.acquire().then(function (release) {
      var result;

      try {
        result = callback();
      } catch (e) {
        release();
        throw e;
      }

      return Promise.resolve(result).then(function (x) {
        return release(), x;
      }, function (e) {
        release();
        throw e;
      });
    });
  };

  Mutex.prototype._dispatchNext = function () {
    if (this._queue.length > 0) {
      this._pending = true;

      this._queue.shift()(this._dispatchNext.bind(this));
    } else {
      this._pending = false;
    }
  };

  return Mutex;
}();

exports.default = Mutex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk11dGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTXV0ZXgiLCJfcXVldWUiLCJfcGVuZGluZyIsInByb3RvdHlwZSIsImlzTG9ja2VkIiwiYWNxdWlyZSIsIl90aGlzIiwidGlja2V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJwdXNoIiwiX2Rpc3BhdGNoTmV4dCIsInJ1bkV4Y2x1c2l2ZSIsImNhbGxiYWNrIiwidGhlbiIsInJlbGVhc2UiLCJyZXN1bHQiLCJlIiwieCIsImxlbmd0aCIsInNoaWZ0IiwiYmluZCIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLElBQUlDLEtBQUs7QUFBRztBQUFlLFlBQVk7QUFDbkMsV0FBU0EsS0FBVCxHQUFpQjtBQUNiLFNBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixLQUFoQjtBQUNIOztBQUNERixFQUFBQSxLQUFLLENBQUNHLFNBQU4sQ0FBZ0JDLFFBQWhCLEdBQTJCLFlBQVk7QUFDbkMsV0FBTyxLQUFLRixRQUFaO0FBQ0gsR0FGRDs7QUFHQUYsRUFBQUEsS0FBSyxDQUFDRyxTQUFOLENBQWdCRSxPQUFoQixHQUEwQixZQUFZO0FBQ2xDLFFBQUlDLEtBQUssR0FBRyxJQUFaOztBQUNBLFFBQUlDLE1BQU0sR0FBRyxJQUFJQyxPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQjtBQUFFLGFBQU9ILEtBQUssQ0FBQ0wsTUFBTixDQUFhUyxJQUFiLENBQWtCRCxPQUFsQixDQUFQO0FBQW9DLEtBQXJFLENBQWI7O0FBQ0EsUUFBSSxDQUFDLEtBQUtQLFFBQVYsRUFBb0I7QUFDaEIsV0FBS1MsYUFBTDtBQUNIOztBQUNELFdBQU9KLE1BQVA7QUFDSCxHQVBEOztBQVFBUCxFQUFBQSxLQUFLLENBQUNHLFNBQU4sQ0FBZ0JTLFlBQWhCLEdBQStCLFVBQVVDLFFBQVYsRUFBb0I7QUFDL0MsV0FBTyxLQUNGUixPQURFLEdBRUZTLElBRkUsQ0FFRyxVQUFVQyxPQUFWLEVBQW1CO0FBQ3pCLFVBQUlDLE1BQUo7O0FBQ0EsVUFBSTtBQUNBQSxRQUFBQSxNQUFNLEdBQUdILFFBQVEsRUFBakI7QUFDSCxPQUZELENBR0EsT0FBT0ksQ0FBUCxFQUFVO0FBQ05GLFFBQUFBLE9BQU87QUFDUCxjQUFPRSxDQUFQO0FBQ0g7O0FBQ0QsYUFBT1QsT0FBTyxDQUNUQyxPQURFLENBQ01PLE1BRE4sRUFFRkYsSUFGRSxDQUVHLFVBQVVJLENBQVYsRUFBYTtBQUFFLGVBQVFILE9BQU8sSUFBSUcsQ0FBbkI7QUFBd0IsT0FGMUMsRUFFNEMsVUFBVUQsQ0FBVixFQUFhO0FBQzVERixRQUFBQSxPQUFPO0FBQ1AsY0FBTUUsQ0FBTjtBQUNILE9BTE0sQ0FBUDtBQU1ILEtBakJNLENBQVA7QUFrQkgsR0FuQkQ7O0FBb0JBakIsRUFBQUEsS0FBSyxDQUFDRyxTQUFOLENBQWdCUSxhQUFoQixHQUFnQyxZQUFZO0FBQ3hDLFFBQUksS0FBS1YsTUFBTCxDQUFZa0IsTUFBWixHQUFxQixDQUF6QixFQUE0QjtBQUN4QixXQUFLakIsUUFBTCxHQUFnQixJQUFoQjs7QUFDQSxXQUFLRCxNQUFMLENBQVltQixLQUFaLEdBQW9CLEtBQUtULGFBQUwsQ0FBbUJVLElBQW5CLENBQXdCLElBQXhCLENBQXBCO0FBQ0gsS0FIRCxNQUlLO0FBQ0QsV0FBS25CLFFBQUwsR0FBZ0IsS0FBaEI7QUFDSDtBQUNKLEdBUkQ7O0FBU0EsU0FBT0YsS0FBUDtBQUNILENBOUMwQixFQUEzQjs7QUErQ0FGLE9BQU8sQ0FBQ3dCLE9BQVIsR0FBa0J0QixLQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE11dGV4ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11dGV4KCkge1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIE11dGV4LnByb3RvdHlwZS5pc0xvY2tlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmc7XG4gICAgfTtcbiAgICBNdXRleC5wcm90b3R5cGUuYWNxdWlyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHRpY2tldCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBfdGhpcy5fcXVldWUucHVzaChyZXNvbHZlKTsgfSk7XG4gICAgICAgIGlmICghdGhpcy5fcGVuZGluZykge1xuICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hOZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tldDtcbiAgICB9O1xuICAgIE11dGV4LnByb3RvdHlwZS5ydW5FeGNsdXNpdmUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIC5hY3F1aXJlKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZWxlYXNlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2VcbiAgICAgICAgICAgICAgICAucmVzb2x2ZShyZXN1bHQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIChyZWxlYXNlKCksIHgpOyB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTXV0ZXgucHJvdG90eXBlLl9kaXNwYXRjaE5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLnNoaWZ0KCkodGhpcy5fZGlzcGF0Y2hOZXh0LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTXV0ZXg7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTXV0ZXg7XG4iXX0=
},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Mutex_1 = require("./Mutex");

exports.Mutex = Mutex_1.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTXV0ZXhfMSIsInJlcXVpcmUiLCJNdXRleCIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLElBQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDLFNBQUQsQ0FBckI7O0FBQ0FILE9BQU8sQ0FBQ0ksS0FBUixHQUFnQkYsT0FBTyxDQUFDRyxPQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE11dGV4XzEgPSByZXF1aXJlKFwiLi9NdXRleFwiKTtcbmV4cG9ydHMuTXV0ZXggPSBNdXRleF8xLmRlZmF1bHQ7XG4iXX0=
},{"./Mutex":2}],4:[function(require,module,exports){
(function (process){
'use strict';

const escapeStringRegexp = require('escape-string-regexp');

const ansiStyles = require('ansi-styles');

const stdoutColor = require('supports-color').stdout;

const template = require('./templates.js');

const isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` → `ansiStyles.color[name]` mapping

const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such

const skipModels = new Set(['gray']);
const styles = Object.create(null);

function applyOptions(obj, options) {
  options = options || {}; // Detect level if not set manually

  const scLevel = stdoutColor ? stdoutColor.level : 0;
  obj.level = options.level === undefined ? scLevel : options.level;
  obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
}

function Chalk(options) {
  // We check for this.template here since calling `chalk.constructor()`
  // by itself will have a `this` of a previously constructed chalk object
  if (!this || !(this instanceof Chalk) || this.template) {
    const chalk = {};
    applyOptions(chalk, options);

    chalk.template = function () {
      const args = [].slice.call(arguments);
      return chalkTag.apply(null, [chalk.template].concat(args));
    };

    Object.setPrototypeOf(chalk, Chalk.prototype);
    Object.setPrototypeOf(chalk.template, chalk);
    chalk.template.constructor = Chalk;
    return chalk.template;
  }

  applyOptions(this, options);
} // Use bright blue on Windows as the normal blue color is illegible


if (isSimpleWindowsTerm) {
  ansiStyles.blue.open = '\u001B[94m';
}

for (const key of Object.keys(ansiStyles)) {
  ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
  styles[key] = {
    get() {
      const codes = ansiStyles[key];
      return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
    }

  };
}

styles.visible = {
  get() {
    return build.call(this, this._styles || [], true, 'visible');
  }

};
ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');

for (const model of Object.keys(ansiStyles.color.ansi)) {
  if (skipModels.has(model)) {
    continue;
  }

  styles[model] = {
    get() {
      const level = this.level;
      return function () {
        const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
        const codes = {
          open,
          close: ansiStyles.color.close,
          closeRe: ansiStyles.color.closeRe
        };
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
      };
    }

  };
}

ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');

for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
  if (skipModels.has(model)) {
    continue;
  }

  const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
  styles[bgModel] = {
    get() {
      const level = this.level;
      return function () {
        const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
        const codes = {
          open,
          close: ansiStyles.bgColor.close,
          closeRe: ansiStyles.bgColor.closeRe
        };
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
      };
    }

  };
}

const proto = Object.defineProperties(() => {}, styles);

function build(_styles, _empty, key) {
  const builder = function () {
    return applyStyle.apply(builder, arguments);
  };

  builder._styles = _styles;
  builder._empty = _empty;
  const self = this;
  Object.defineProperty(builder, 'level', {
    enumerable: true,

    get() {
      return self.level;
    },

    set(level) {
      self.level = level;
    }

  });
  Object.defineProperty(builder, 'enabled', {
    enumerable: true,

    get() {
      return self.enabled;
    },

    set(enabled) {
      self.enabled = enabled;
    }

  }); // See below for fix regarding invisible grey/dim combination on Windows

  builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is
  // no way to create a function with a different prototype

  builder.__proto__ = proto; // eslint-disable-line no-proto

  return builder;
}

function applyStyle() {
  // Support varags, but simply cast to string in case there's only one arg
  const args = arguments;
  const argsLen = args.length;
  let str = String(arguments[0]);

  if (argsLen === 0) {
    return '';
  }

  if (argsLen > 1) {
    // Don't slice `arguments`, it prevents V8 optimizations
    for (let a = 1; a < argsLen; a++) {
      str += ' ' + args[a];
    }
  }

  if (!this.enabled || this.level <= 0 || !str) {
    return this._empty ? '' : str;
  } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
  // see https://github.com/chalk/chalk/issues/58
  // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.


  const originalDim = ansiStyles.dim.open;

  if (isSimpleWindowsTerm && this.hasGrey) {
    ansiStyles.dim.open = '';
  }

  for (const code of this._styles.slice().reverse()) {
    // Replace any instances already present with a re-opening code
    // otherwise only the part of the string until said closing code
    // will be colored, and the rest will simply be 'plain'.
    str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen
    // after next line to fix a bleed issue on macOS
    // https://github.com/chalk/chalk/pull/92

    str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
  } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue


  ansiStyles.dim.open = originalDim;
  return str;
}

function chalkTag(chalk, strings) {
  if (!Array.isArray(strings)) {
    // If chalk() was called by itself or with a string,
    // return the string itself as a string.
    return [].slice.call(arguments, 1).join(' ');
  }

  const args = [].slice.call(arguments, 2);
  const parts = [strings.raw[0]];

  for (let i = 1; i < strings.length; i++) {
    parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
    parts.push(String(strings.raw[i]));
  }

  return template(chalk, parts.join(''));
}

Object.defineProperties(Chalk.prototype, styles);
module.exports = Chalk(); // eslint-disable-line new-cap

module.exports.supportsColor = stdoutColor;
module.exports.default = module.exports; // For TypeScript
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("2ionoC"))
},{"./templates.js":5,"2ionoC":11,"ansi-styles":1,"escape-string-regexp":10,"supports-color":19}],5:[function(require,module,exports){
'use strict';

const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
const ESCAPES = new Map([['n', '\n'], ['r', '\r'], ['t', '\t'], ['b', '\b'], ['f', '\f'], ['v', '\v'], ['0', '\0'], ['\\', '\\'], ['e', '\u001B'], ['a', '\u0007']]);

function unescape(c) {
  if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {
    return String.fromCharCode(parseInt(c.slice(1), 16));
  }

  return ESCAPES.get(c) || c;
}

function parseArguments(name, args) {
  const results = [];
  const chunks = args.trim().split(/\s*,\s*/g);
  let matches;

  for (const chunk of chunks) {
    if (!isNaN(chunk)) {
      results.push(Number(chunk));
    } else if (matches = chunk.match(STRING_REGEX)) {
      results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
    } else {
      throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
    }
  }

  return results;
}

function parseStyle(style) {
  STYLE_REGEX.lastIndex = 0;
  const results = [];
  let matches;

  while ((matches = STYLE_REGEX.exec(style)) !== null) {
    const name = matches[1];

    if (matches[2]) {
      const args = parseArguments(name, matches[2]);
      results.push([name].concat(args));
    } else {
      results.push([name]);
    }
  }

  return results;
}

function buildStyle(chalk, styles) {
  const enabled = {};

  for (const layer of styles) {
    for (const style of layer.styles) {
      enabled[style[0]] = layer.inverse ? null : style.slice(1);
    }
  }

  let current = chalk;

  for (const styleName of Object.keys(enabled)) {
    if (Array.isArray(enabled[styleName])) {
      if (!(styleName in current)) {
        throw new Error(`Unknown Chalk style: ${styleName}`);
      }

      if (enabled[styleName].length > 0) {
        current = current[styleName].apply(current, enabled[styleName]);
      } else {
        current = current[styleName];
      }
    }
  }

  return current;
}

module.exports = (chalk, tmp) => {
  const styles = [];
  const chunks = [];
  let chunk = []; // eslint-disable-next-line max-params

  tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
    if (escapeChar) {
      chunk.push(unescape(escapeChar));
    } else if (style) {
      const str = chunk.join('');
      chunk = [];
      chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
      styles.push({
        inverse,
        styles: parseStyle(style)
      });
    } else if (close) {
      if (styles.length === 0) {
        throw new Error('Found extraneous } in Chalk template literal');
      }

      chunks.push(buildStyle(chalk, styles)(chunk.join('')));
      chunk = [];
      styles.pop();
    } else {
      chunk.push(chr);
    }
  });
  chunks.push(chunk.join(''));

  if (styles.length > 0) {
    const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
    throw new Error(errMsg);
  }

  return chunks.join('');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],6:[function(require,module,exports){
/* MIT license */
var cssKeywords = require('color-name'); // NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)


var reverseKeywords = {};

for (var key in cssKeywords) {
  if (cssKeywords.hasOwnProperty(key)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
}

var convert = module.exports = {
  rgb: {
    channels: 3,
    labels: 'rgb'
  },
  hsl: {
    channels: 3,
    labels: 'hsl'
  },
  hsv: {
    channels: 3,
    labels: 'hsv'
  },
  hwb: {
    channels: 3,
    labels: 'hwb'
  },
  cmyk: {
    channels: 4,
    labels: 'cmyk'
  },
  xyz: {
    channels: 3,
    labels: 'xyz'
  },
  lab: {
    channels: 3,
    labels: 'lab'
  },
  lch: {
    channels: 3,
    labels: 'lch'
  },
  hex: {
    channels: 1,
    labels: ['hex']
  },
  keyword: {
    channels: 1,
    labels: ['keyword']
  },
  ansi16: {
    channels: 1,
    labels: ['ansi16']
  },
  ansi256: {
    channels: 1,
    labels: ['ansi256']
  },
  hcg: {
    channels: 3,
    labels: ['h', 'c', 'g']
  },
  apple: {
    channels: 3,
    labels: ['r16', 'g16', 'b16']
  },
  gray: {
    channels: 1,
    labels: ['gray']
  }
}; // hide .channels and .labels properties

for (var model in convert) {
  if (convert.hasOwnProperty(model)) {
    if (!('channels' in convert[model])) {
      throw new Error('missing channels property: ' + model);
    }

    if (!('labels' in convert[model])) {
      throw new Error('missing channel labels property: ' + model);
    }

    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error('channel and label counts mismatch: ' + model);
    }

    var channels = convert[model].channels;
    var labels = convert[model].labels;
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], 'channels', {
      value: channels
    });
    Object.defineProperty(convert[model], 'labels', {
      value: labels
    });
  }
}

convert.rgb.hsl = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var delta = max - min;
  var h;
  var s;
  var l;

  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }

  h = Math.min(h * 60, 360);

  if (h < 0) {
    h += 360;
  }

  l = (min + max) / 2;

  if (max === min) {
    s = 0;
  } else if (l <= 0.5) {
    s = delta / (max + min);
  } else {
    s = delta / (2 - max - min);
  }

  return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
  var rdif;
  var gdif;
  var bdif;
  var h;
  var s;
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var v = Math.max(r, g, b);
  var diff = v - Math.min(r, g, b);

  var diffc = function (c) {
    return (v - c) / 6 / diff + 1 / 2;
  };

  if (diff === 0) {
    h = s = 0;
  } else {
    s = diff / v;
    rdif = diffc(r);
    gdif = diffc(g);
    bdif = diffc(b);

    if (r === v) {
      h = bdif - gdif;
    } else if (g === v) {
      h = 1 / 3 + rdif - bdif;
    } else if (b === v) {
      h = 2 / 3 + gdif - rdif;
    }

    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }
  }

  return [h * 360, s * 100, v * 100];
};

convert.rgb.hwb = function (rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];
  var h = convert.rgb.hsl(rgb)[0];
  var w = 1 / 255 * Math.min(r, Math.min(g, b));
  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
  return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var c;
  var m;
  var y;
  var k;
  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
};
/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */


function comparativeDistance(x, y) {
  return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}

convert.rgb.keyword = function (rgb) {
  var reversed = reverseKeywords[rgb];

  if (reversed) {
    return reversed;
  }

  var currentClosestDistance = Infinity;
  var currentClosestKeyword;

  for (var keyword in cssKeywords) {
    if (cssKeywords.hasOwnProperty(keyword)) {
      var value = cssKeywords[keyword]; // Compute comparative distance

      var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
  }

  return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
  return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255; // assume sRGB

  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
  var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
  var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
  return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
  var xyz = convert.rgb.xyz(rgb);
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
  var h = hsl[0] / 360;
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var t1;
  var t2;
  var t3;
  var rgb;
  var val;

  if (s === 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5) {
    t2 = l * (1 + s);
  } else {
    t2 = l + s - l * s;
  }

  t1 = 2 * l - t2;
  rgb = [0, 0, 0];

  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);

    if (t3 < 0) {
      t3++;
    }

    if (t3 > 1) {
      t3--;
    }

    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }

    rgb[i] = val * 255;
  }

  return rgb;
};

convert.hsl.hsv = function (hsl) {
  var h = hsl[0];
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var smin = s;
  var lmin = Math.max(l, 0.01);
  var sv;
  var v;
  l *= 2;
  s *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  v = (l + s) / 2;
  sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
  return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
  var h = hsv[0] / 60;
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var hi = Math.floor(h) % 6;
  var f = h - Math.floor(h);
  var p = 255 * v * (1 - s);
  var q = 255 * v * (1 - s * f);
  var t = 255 * v * (1 - s * (1 - f));
  v *= 255;

  switch (hi) {
    case 0:
      return [v, t, p];

    case 1:
      return [q, v, p];

    case 2:
      return [p, v, t];

    case 3:
      return [p, q, v];

    case 4:
      return [t, p, v];

    case 5:
      return [v, p, q];
  }
};

convert.hsv.hsl = function (hsv) {
  var h = hsv[0];
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var vmin = Math.max(v, 0.01);
  var lmin;
  var sl;
  var l;
  l = (2 - s) * v;
  lmin = (2 - s) * vmin;
  sl = s * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
}; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb


convert.hwb.rgb = function (hwb) {
  var h = hwb[0] / 360;
  var wh = hwb[1] / 100;
  var bl = hwb[2] / 100;
  var ratio = wh + bl;
  var i;
  var v;
  var f;
  var n; // wh + bl cant be > 1

  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;

  if ((i & 0x01) !== 0) {
    f = 1 - f;
  }

  n = wh + f * (v - wh); // linear interpolation

  var r;
  var g;
  var b;

  switch (i) {
    default:
    case 6:
    case 0:
      r = v;
      g = n;
      b = wh;
      break;

    case 1:
      r = n;
      g = v;
      b = wh;
      break;

    case 2:
      r = wh;
      g = v;
      b = n;
      break;

    case 3:
      r = wh;
      g = n;
      b = v;
      break;

    case 4:
      r = n;
      g = wh;
      b = v;
      break;

    case 5:
      r = v;
      g = wh;
      b = n;
      break;
  }

  return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
  var c = cmyk[0] / 100;
  var m = cmyk[1] / 100;
  var y = cmyk[2] / 100;
  var k = cmyk[3] / 100;
  var r;
  var g;
  var b;
  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
  var x = xyz[0] / 100;
  var y = xyz[1] / 100;
  var z = xyz[2] / 100;
  var r;
  var g;
  var b;
  r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB

  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};

convert.lab.xyz = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var x;
  var y;
  var z;
  y = (l + 16) / 116;
  x = a / 500 + y;
  z = y - b / 200;
  var y2 = Math.pow(y, 3);
  var x2 = Math.pow(x, 3);
  var z2 = Math.pow(z, 3);
  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
  x *= 95.047;
  y *= 100;
  z *= 108.883;
  return [x, y, z];
};

convert.lab.lch = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var hr;
  var h;
  var c;
  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;

  if (h < 0) {
    h += 360;
  }

  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
};

convert.lch.lab = function (lch) {
  var l = lch[0];
  var c = lch[1];
  var h = lch[2];
  var a;
  var b;
  var hr;
  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];
  var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  value = Math.round(value / 50);

  if (value === 0) {
    return 30;
  }

  var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

  if (value === 2) {
    ansi += 60;
  }

  return ansi;
};

convert.hsv.ansi16 = function (args) {
  // optimization here; we already know the value and don't need to get
  // it converted for us.
  return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2]; // we use the extended greyscale palette here, with the exception of
  // black and white. normal palette only has 4 greyscale shades.

  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }

    if (r > 248) {
      return 231;
    }

    return Math.round((r - 8) / 247 * 24) + 232;
  }

  var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};

convert.ansi16.rgb = function (args) {
  var color = args % 10; // handle greyscale

  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }

    color = color / 10.5 * 255;
    return [color, color, color];
  }

  var mult = (~~(args > 50) + 1) * 0.5;
  var r = (color & 1) * mult * 255;
  var g = (color >> 1 & 1) * mult * 255;
  var b = (color >> 2 & 1) * mult * 255;
  return [r, g, b];
};

convert.ansi256.rgb = function (args) {
  // handle greyscale
  if (args >= 232) {
    var c = (args - 232) * 10 + 8;
    return [c, c, c];
  }

  args -= 16;
  var rem;
  var r = Math.floor(args / 36) / 5 * 255;
  var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  var b = rem % 6 / 5 * 255;
  return [r, g, b];
};

convert.rgb.hex = function (args) {
  var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
  var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

  if (!match) {
    return [0, 0, 0];
  }

  var colorString = match[0];

  if (match[0].length === 3) {
    colorString = colorString.split('').map(function (char) {
      return char + char;
    }).join('');
  }

  var integer = parseInt(colorString, 16);
  var r = integer >> 16 & 0xFF;
  var g = integer >> 8 & 0xFF;
  var b = integer & 0xFF;
  return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var max = Math.max(Math.max(r, g), b);
  var min = Math.min(Math.min(r, g), b);
  var chroma = max - min;
  var grayscale;
  var hue;

  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }

  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma + 4;
  }

  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var c = 1;
  var f = 0;

  if (l < 0.5) {
    c = 2.0 * s * l;
  } else {
    c = 2.0 * s * (1.0 - l);
  }

  if (c < 1.0) {
    f = (l - 0.5 * c) / (1.0 - c);
  }

  return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var c = s * v;
  var f = 0;

  if (c < 1.0) {
    f = (v - c) / (1 - c);
  }

  return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
  var h = hcg[0] / 360;
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;

  if (c === 0.0) {
    return [g * 255, g * 255, g * 255];
  }

  var pure = [0, 0, 0];
  var hi = h % 1 * 6;
  var v = hi % 1;
  var w = 1 - v;
  var mg = 0;

  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v;
      pure[2] = 0;
      break;

    case 1:
      pure[0] = w;
      pure[1] = 1;
      pure[2] = 0;
      break;

    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v;
      break;

    case 3:
      pure[0] = 0;
      pure[1] = w;
      pure[2] = 1;
      break;

    case 4:
      pure[0] = v;
      pure[1] = 0;
      pure[2] = 1;
      break;

    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w;
  }

  mg = (1.0 - c) * g;
  return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
};

convert.hcg.hsv = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  var f = 0;

  if (v > 0.0) {
    f = c / v;
  }

  return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var l = g * (1.0 - c) + 0.5 * c;
  var s = 0;

  if (l > 0.0 && l < 0.5) {
    s = c / (2 * l);
  } else if (l >= 0.5 && l < 1.0) {
    s = c / (2 * (1 - l));
  }

  return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
  var w = hwb[1] / 100;
  var b = hwb[2] / 100;
  var v = 1 - b;
  var c = v - w;
  var g = 0;

  if (c < 1) {
    g = (v - c) / (1 - c);
  }

  return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};

convert.rgb.apple = function (rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};

convert.gray.rgb = function (args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
  return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
  return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
  return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
  return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
  var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  var integer = (val << 16) + (val << 8) + val;
  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
  var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"color-name":9}],7:[function(require,module,exports){
var conversions = require('./conversions');

var route = require('./route');

var convert = {};
var models = Object.keys(conversions);

function wrapRaw(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    return fn(args);
  }; // preserve .conversion property if there is one


  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

function wrapRounded(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    var result = fn(args); // we're assuming the result is an array here.
    // see notice in conversions.js; don't use box types
    // in conversion functions.

    if (typeof result === 'object') {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }

    return result;
  }; // preserve .conversion property if there is one


  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

models.forEach(function (fromModel) {
  convert[fromModel] = {};
  Object.defineProperty(convert[fromModel], 'channels', {
    value: conversions[fromModel].channels
  });
  Object.defineProperty(convert[fromModel], 'labels', {
    value: conversions[fromModel].labels
  });
  var routes = route(fromModel);
  var routeModels = Object.keys(routes);
  routeModels.forEach(function (toModel) {
    var fn = routes[toModel];
    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});
module.exports = convert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsInJvdXRlIiwiY29udmVydCIsIm1vZGVscyIsIk9iamVjdCIsImtleXMiLCJ3cmFwUmF3IiwiZm4iLCJ3cmFwcGVkRm4iLCJhcmdzIiwidW5kZWZpbmVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJjb252ZXJzaW9uIiwid3JhcFJvdW5kZWQiLCJyZXN1bHQiLCJsZW4iLCJpIiwiTWF0aCIsInJvdW5kIiwiZm9yRWFjaCIsImZyb21Nb2RlbCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjaGFubmVscyIsImxhYmVscyIsInJvdXRlcyIsInJvdXRlTW9kZWxzIiwidG9Nb2RlbCIsInJhdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBekI7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsU0FBRCxDQUFuQjs7QUFFQSxJQUFJRSxPQUFPLEdBQUcsRUFBZDtBQUVBLElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlOLFdBQVosQ0FBYjs7QUFFQSxTQUFTTyxPQUFULENBQWlCQyxFQUFqQixFQUFxQjtBQUNwQixNQUFJQyxTQUFTLEdBQUcsVUFBVUMsSUFBVixFQUFnQjtBQUMvQixRQUFJQSxJQUFJLEtBQUtDLFNBQVQsSUFBc0JELElBQUksS0FBSyxJQUFuQyxFQUF5QztBQUN4QyxhQUFPQSxJQUFQO0FBQ0E7O0FBRUQsUUFBSUUsU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3pCSCxNQUFBQSxJQUFJLEdBQUdJLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCTCxTQUEzQixDQUFQO0FBQ0E7O0FBRUQsV0FBT0osRUFBRSxDQUFDRSxJQUFELENBQVQ7QUFDQSxHQVZELENBRG9CLENBYXBCOzs7QUFDQSxNQUFJLGdCQUFnQkYsRUFBcEIsRUFBd0I7QUFDdkJDLElBQUFBLFNBQVMsQ0FBQ1MsVUFBVixHQUF1QlYsRUFBRSxDQUFDVSxVQUExQjtBQUNBOztBQUVELFNBQU9ULFNBQVA7QUFDQTs7QUFFRCxTQUFTVSxXQUFULENBQXFCWCxFQUFyQixFQUF5QjtBQUN4QixNQUFJQyxTQUFTLEdBQUcsVUFBVUMsSUFBVixFQUFnQjtBQUMvQixRQUFJQSxJQUFJLEtBQUtDLFNBQVQsSUFBc0JELElBQUksS0FBSyxJQUFuQyxFQUF5QztBQUN4QyxhQUFPQSxJQUFQO0FBQ0E7O0FBRUQsUUFBSUUsU0FBUyxDQUFDQyxNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3pCSCxNQUFBQSxJQUFJLEdBQUdJLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCTCxTQUEzQixDQUFQO0FBQ0E7O0FBRUQsUUFBSVEsTUFBTSxHQUFHWixFQUFFLENBQUNFLElBQUQsQ0FBZixDQVQrQixDQVcvQjtBQUNBO0FBQ0E7O0FBQ0EsUUFBSSxPQUFPVSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQy9CLFdBQUssSUFBSUMsR0FBRyxHQUFHRCxNQUFNLENBQUNQLE1BQWpCLEVBQXlCUyxDQUFDLEdBQUcsQ0FBbEMsRUFBcUNBLENBQUMsR0FBR0QsR0FBekMsRUFBOENDLENBQUMsRUFBL0MsRUFBbUQ7QUFDbERGLFFBQUFBLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFOLEdBQVlDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixNQUFNLENBQUNFLENBQUQsQ0FBakIsQ0FBWjtBQUNBO0FBQ0Q7O0FBRUQsV0FBT0YsTUFBUDtBQUNBLEdBckJELENBRHdCLENBd0J4Qjs7O0FBQ0EsTUFBSSxnQkFBZ0JaLEVBQXBCLEVBQXdCO0FBQ3ZCQyxJQUFBQSxTQUFTLENBQUNTLFVBQVYsR0FBdUJWLEVBQUUsQ0FBQ1UsVUFBMUI7QUFDQTs7QUFFRCxTQUFPVCxTQUFQO0FBQ0E7O0FBRURMLE1BQU0sQ0FBQ3FCLE9BQVAsQ0FBZSxVQUFVQyxTQUFWLEVBQXFCO0FBQ25DdkIsRUFBQUEsT0FBTyxDQUFDdUIsU0FBRCxDQUFQLEdBQXFCLEVBQXJCO0FBRUFyQixFQUFBQSxNQUFNLENBQUNzQixjQUFQLENBQXNCeEIsT0FBTyxDQUFDdUIsU0FBRCxDQUE3QixFQUEwQyxVQUExQyxFQUFzRDtBQUFDRSxJQUFBQSxLQUFLLEVBQUU1QixXQUFXLENBQUMwQixTQUFELENBQVgsQ0FBdUJHO0FBQS9CLEdBQXREO0FBQ0F4QixFQUFBQSxNQUFNLENBQUNzQixjQUFQLENBQXNCeEIsT0FBTyxDQUFDdUIsU0FBRCxDQUE3QixFQUEwQyxRQUExQyxFQUFvRDtBQUFDRSxJQUFBQSxLQUFLLEVBQUU1QixXQUFXLENBQUMwQixTQUFELENBQVgsQ0FBdUJJO0FBQS9CLEdBQXBEO0FBRUEsTUFBSUMsTUFBTSxHQUFHN0IsS0FBSyxDQUFDd0IsU0FBRCxDQUFsQjtBQUNBLE1BQUlNLFdBQVcsR0FBRzNCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZeUIsTUFBWixDQUFsQjtBQUVBQyxFQUFBQSxXQUFXLENBQUNQLE9BQVosQ0FBb0IsVUFBVVEsT0FBVixFQUFtQjtBQUN0QyxRQUFJekIsRUFBRSxHQUFHdUIsTUFBTSxDQUFDRSxPQUFELENBQWY7QUFFQTlCLElBQUFBLE9BQU8sQ0FBQ3VCLFNBQUQsQ0FBUCxDQUFtQk8sT0FBbkIsSUFBOEJkLFdBQVcsQ0FBQ1gsRUFBRCxDQUF6QztBQUNBTCxJQUFBQSxPQUFPLENBQUN1QixTQUFELENBQVAsQ0FBbUJPLE9BQW5CLEVBQTRCQyxHQUE1QixHQUFrQzNCLE9BQU8sQ0FBQ0MsRUFBRCxDQUF6QztBQUNBLEdBTEQ7QUFNQSxDQWZEO0FBaUJBMkIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakMsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG52YXIgcm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJyk7XG5cbnZhciBjb252ZXJ0ID0ge307XG5cbnZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cbmZ1bmN0aW9uIHdyYXBSYXcoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmbihhcmdzKTtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbmZ1bmN0aW9uIHdyYXBSb3VuZGVkKGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyB3ZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yICh2YXIgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0dmFyIHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdHZhciByb3V0ZU1vZGVscyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG5cblx0cm91dGVNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAodG9Nb2RlbCkge1xuXHRcdHZhciBmbiA9IHJvdXRlc1t0b01vZGVsXTtcblxuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXSA9IHdyYXBSb3VuZGVkKGZuKTtcblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0ucmF3ID0gd3JhcFJhdyhmbik7XG5cdH0pO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydDtcbiJdfQ==
},{"./conversions":6,"./route":8}],8:[function(require,module,exports){
var conversions = require('./conversions');
/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/


function buildGraph() {
  var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

  var models = Object.keys(conversions);

  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  }

  return graph;
} // https://en.wikipedia.org/wiki/Breadth-first_search


function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel]; // unshift -> queue -> pop

  graph[fromModel].distance = 0;

  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions[current]);

    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];

      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }

  return graph;
}

function link(from, to) {
  return function (args) {
    return to(from(args));
  };
}

function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;

  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }

  fn.conversion = path;
  return fn;
}

module.exports = function (fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models = Object.keys(graph);

  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];

    if (node.parent === null) {
      // no possible conversion, or this node is the source model.
      continue;
    }

    conversion[toModel] = wrapConversion(toModel, graph);
  }

  return conversion;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlLmpzIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsImJ1aWxkR3JhcGgiLCJncmFwaCIsIm1vZGVscyIsIk9iamVjdCIsImtleXMiLCJsZW4iLCJsZW5ndGgiLCJpIiwiZGlzdGFuY2UiLCJwYXJlbnQiLCJkZXJpdmVCRlMiLCJmcm9tTW9kZWwiLCJxdWV1ZSIsImN1cnJlbnQiLCJwb3AiLCJhZGphY2VudHMiLCJhZGphY2VudCIsIm5vZGUiLCJ1bnNoaWZ0IiwibGluayIsImZyb20iLCJ0byIsImFyZ3MiLCJ3cmFwQ29udmVyc2lvbiIsInRvTW9kZWwiLCJwYXRoIiwiZm4iLCJjdXIiLCJjb252ZXJzaW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLENBQUMsZUFBRCxDQUF6QjtBQUVBOzs7Ozs7Ozs7Ozs7QUFXQSxTQUFTQyxVQUFULEdBQXNCO0FBQ3JCLE1BQUlDLEtBQUssR0FBRyxFQUFaLENBRHFCLENBRXJCOztBQUNBLE1BQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlOLFdBQVosQ0FBYjs7QUFFQSxPQUFLLElBQUlPLEdBQUcsR0FBR0gsTUFBTSxDQUFDSSxNQUFqQixFQUF5QkMsQ0FBQyxHQUFHLENBQWxDLEVBQXFDQSxDQUFDLEdBQUdGLEdBQXpDLEVBQThDRSxDQUFDLEVBQS9DLEVBQW1EO0FBQ2xETixJQUFBQSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFQLENBQUwsR0FBbUI7QUFDbEI7QUFDQTtBQUNBQyxNQUFBQSxRQUFRLEVBQUUsQ0FBQyxDQUhPO0FBSWxCQyxNQUFBQSxNQUFNLEVBQUU7QUFKVSxLQUFuQjtBQU1BOztBQUVELFNBQU9SLEtBQVA7QUFDQSxDLENBRUQ7OztBQUNBLFNBQVNTLFNBQVQsQ0FBbUJDLFNBQW5CLEVBQThCO0FBQzdCLE1BQUlWLEtBQUssR0FBR0QsVUFBVSxFQUF0QjtBQUNBLE1BQUlZLEtB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TyxHQUFHdEIsTUFBTSxDQUFDSyxDQUFELENBQXBCO0FBQ0EsUUFBSVUsSUFBSSxHQUFHaEIsS0FBSyxDQUFDdUIsT0FBRCxDQUFoQjs7QUFFQSxRQUFJUCxJQUFJLENBQUNSLE1BQUwsS0FBZ0IsSUFBcEIsRUFBMEI7QUFDekI7QUFDQTtBQUNBOztBQUVEbUIsSUFBQUEsVUFBVSxDQUFDSixPQUFELENBQVYsR0FBc0JELGNBQWMsQ0FBQ0MsT0FBRCxFQUFVdkIsS0FBVixDQUFwQztBQUNBOztBQUVELFNBQU8yQixVQUFQO0FBQ0EsQ0FsQkQiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5cbi8qXG5cdHRoaXMgZnVuY3Rpb24gcm91dGVzIGEgbW9kZWwgdG8gYWxsIG90aGVyIG1vZGVscy5cblxuXHRhbGwgZnVuY3Rpb25zIHRoYXQgYXJlIHJvdXRlZCBoYXZlIGEgcHJvcGVydHkgYC5jb252ZXJzaW9uYCBhdHRhY2hlZFxuXHR0byB0aGUgcmV0dXJuZWQgc3ludGhldGljIGZ1bmN0aW9uLiBUaGlzIHByb3BlcnR5IGlzIGFuIGFycmF5XG5cdG9mIHN0cmluZ3MsIGVhY2ggd2l0aCB0aGUgc3RlcHMgaW4gYmV0d2VlbiB0aGUgJ2Zyb20nIGFuZCAndG8nXG5cdGNvbG9yIG1vZGVscyAoaW5jbHVzaXZlKS5cblxuXHRjb252ZXJzaW9ucyB0aGF0IGFyZSBub3QgcG9zc2libGUgc2ltcGx5IGFyZSBub3QgaW5jbHVkZWQuXG4qL1xuXG5mdW5jdGlvbiBidWlsZEdyYXBoKCkge1xuXHR2YXIgZ3JhcGggPSB7fTtcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL29iamVjdC1rZXlzLXZzLWZvci1pbi13aXRoLWNsb3N1cmUvM1xuXHR2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnMpO1xuXG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRncmFwaFttb2RlbHNbaV1dID0ge1xuXHRcdFx0Ly8gaHR0cDovL2pzcGVyZi5jb20vMS12cy1pbmZpbml0eVxuXHRcdFx0Ly8gbWljcm8tb3B0LCBidXQgdGhpcyBpcyBzaW1wbGUuXG5cdFx0XHRkaXN0YW5jZTogLTEsXG5cdFx0XHRwYXJlbnQ6IG51bGxcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CcmVhZHRoLWZpcnN0X3NlYXJjaFxuZnVuY3Rpb24gZGVyaXZlQkZTKGZyb21Nb2RlbCkge1xuXHR2YXIgZ3JhcGggPSBidWlsZEdyYXBoKCk7XG5cdHZhciBxdWV1ZSA9IFtmcm9tTW9kZWxdOyAvLyB1bnNoaWZ0IC0+IHF1ZXVlIC0+IHBvcFxuXG5cdGdyYXBoW2Zyb21Nb2RlbF0uZGlzdGFuY2UgPSAwO1xuXG5cdHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcblx0XHR2YXIgY3VycmVudCA9IHF1ZXVlLnBvcCgpO1xuXHRcdHZhciBhZGphY2VudHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9uc1tjdXJyZW50XSk7XG5cblx0XHRmb3IgKHZhciBsZW4gPSBhZGphY2VudHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR2YXIgYWRqYWNlbnQgPSBhZGphY2VudHNbaV07XG5cdFx0XHR2YXIgbm9kZSA9IGdyYXBoW2FkamFjZW50XTtcblxuXHRcdFx0aWYgKG5vZGUuZGlzdGFuY2UgPT09IC0xKSB7XG5cdFx0XHRcdG5vZGUuZGlzdGFuY2UgPSBncmFwaFtjdXJyZW50XS5kaXN0YW5jZSArIDE7XG5cdFx0XHRcdG5vZGUucGFyZW50ID0gY3VycmVudDtcblx0XHRcdFx0cXVldWUudW5zaGlmdChhZGphY2VudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGdyYXBoO1xufVxuXG5mdW5jdGlvbiBsaW5rKGZyb20sIHRvKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoYXJncykge1xuXHRcdHJldHVybiB0byhmcm9tKGFyZ3MpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpIHtcblx0dmFyIHBhdGggPSBbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50LCB0b01vZGVsXTtcblx0dmFyIGZuID0gY29udmVyc2lvbnNbZ3JhcGhbdG9Nb2RlbF0ucGFyZW50XVt0b01vZGVsXTtcblxuXHR2YXIgY3VyID0gZ3JhcGhbdG9Nb2RlbF0ucGFyZW50O1xuXHR3aGlsZSAoZ3JhcGhbY3VyXS5wYXJlbnQpIHtcblx0XHRwYXRoLnVuc2hpZnQoZ3JhcGhbY3VyXS5wYXJlbnQpO1xuXHRcdGZuID0gbGluayhjb252ZXJzaW9uc1tncmFwaFtjdXJdLnBhcmVudF1bY3VyXSwgZm4pO1xuXHRcdGN1ciA9IGdyYXBoW2N1cl0ucGFyZW50O1xuXHR9XG5cblx0Zm4uY29udmVyc2lvbiA9IHBhdGg7XG5cdHJldHVybiBmbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGRlcml2ZUJGUyhmcm9tTW9kZWwpO1xuXHR2YXIgY29udmVyc2lvbiA9IHt9O1xuXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhncmFwaCk7XG5cdGZvciAodmFyIGxlbiA9IG1vZGVscy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHR2YXIgdG9Nb2RlbCA9IG1vZGVsc1tpXTtcblx0XHR2YXIgbm9kZSA9IGdyYXBoW3RvTW9kZWxdO1xuXG5cdFx0aWYgKG5vZGUucGFyZW50ID09PSBudWxsKSB7XG5cdFx0XHQvLyBubyBwb3NzaWJsZSBjb252ZXJzaW9uLCBvciB0aGlzIG5vZGUgaXMgdGhlIHNvdXJjZSBtb2RlbC5cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnZlcnNpb25bdG9Nb2RlbF0gPSB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCk7XG5cdH1cblxuXHRyZXR1cm4gY29udmVyc2lvbjtcbn07XG5cbiJdfQ==
},{"./conversions":6}],9:[function(require,module,exports){
'use strict';

module.exports = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEIsZUFBYSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQURHO0FBRWhCLGtCQUFnQixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQUZBO0FBR2hCLFVBQVEsQ0FBQyxDQUFELEVBQUksR0FBSixFQUFTLEdBQVQsQ0FIUTtBQUloQixnQkFBYyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQUpFO0FBS2hCLFdBQVMsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsQ0FMTztBQU1oQixXQUFTLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBTk87QUFPaEIsWUFBVSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQVBNO0FBUWhCLFdBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsQ0FSTztBQVNoQixvQkFBa0IsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsQ0FURjtBQVVoQixVQUFRLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxHQUFQLENBVlE7QUFXaEIsZ0JBQWMsQ0FBQyxHQUFELEVBQU0sRUFBTixFQUFVLEdBQVYsQ0FYRTtBQVloQixXQUFTLENBQUMsR0FBRCxFQUFNLEVBQU4sRUFBVSxFQUFWLENBWk87QUFhaEIsZUFBYSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQWJHO0FBY2hCLGVBQWEsQ0FBQyxFQUFELEVBQUssR0FBTCxFQUFVLEdBQVYsQ0FkRztBQWVoQixnQkFBYyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsQ0FBWCxDQWZFO0FBZ0JoQixlQUFhLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxFQUFYLENBaEJHO0FBaUJoQixXQUFTLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxFQUFYLENB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QUFNLEdBQU4sRUFBVyxDQUFYLENBbkpNO0FBb0poQixpQkFBZSxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsRUFBWDtBQXBKQyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0XCJhbGljZWJsdWVcIjogWzI0MCwgMjQ4LCAyNTVdLFxyXG5cdFwiYW50aXF1ZXdoaXRlXCI6IFsyNTAsIDIzNSwgMjE1XSxcclxuXHRcImFxdWFcIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImFxdWFtYXJpbmVcIjogWzEyNywgMjU1LCAyMTJdLFxyXG5cdFwiYXp1cmVcIjogWzI0MCwgMjU1LCAyNTVdLFxyXG5cdFwiYmVpZ2VcIjogWzI0NSwgMjQ1LCAyMjBdLFxyXG5cdFwiYmlzcXVlXCI6IFsyNTUsIDIyOCwgMTk2XSxcclxuXHRcImJsYWNrXCI6IFswLCAwLCAwXSxcclxuXHRcImJsYW5jaGVkYWxtb25kXCI6IFsyNTUsIDIzNSwgMjA1XSxcclxuXHRcImJsdWVcIjogWzAsIDAsIDI1NV0sXHJcblx0XCJibHVldmlvbGV0XCI6IFsxMzgsIDQzLCAyMjZdLFxyXG5cdFwiYnJvd25cIjogWzE2NSwgNDIsIDQyXSxcclxuXHRcImJ1cmx5d29vZFwiOiBbMjIyLCAxODQsIDEzNV0sXHJcblx0XCJjYWRldGJsdWVcIjogWzk1LCAxNTgsIDE2MF0sXHJcblx0XCJjaGFydHJldXNlXCI6IFsxMjcsIDI1NSwgMF0sXHJcblx0XCJjaG9jb2xhdGVcIjogWzIxMCwgMTA1LCAzMF0sXHJcblx0XCJjb3JhbFwiOiBbMjU1LCAxMjcsIDgwXSxcclxuXHRcImNvcm5mbG93ZXJibHVlXCI6IFsxMDAsIDE0OSwgMjM3XSxcclxuXHRcImNvcm5zaWxrXCI6IFsyNTUsIDI0OCwgMjIwXSxcclxuXHRcImNyaW1zb25cIjogWzIyMCwgMjAsIDYwXSxcclxuXHRcImN5YW5cIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImRhcmtibHVlXCI6IFswLCAwLCAxMzldLFxyXG5cdFwiZGFya2N5YW5cIjogWzAsIDEzOSwgMTM5XSxcclxuXHRcImRhcmtnb2xkZW5yb2RcIjogWzE4NCwgMTM0LCAxMV0sXHJcblx0XCJkYXJrZ3JheVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJrZ3JlZW5cIjogWzAsIDEwMCwgMF0sXHJcblx0XCJkYXJrZ3JleVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJra2hha2lcIjogWzE4OSwgMTgzLCAxMDddLFxyXG5cdFwiZGFya21hZ2VudGFcIjogWzEzOSwgMCwgMTM5XSxcclxuXHRcImRhcmtvbGl2ZWdyZWVuXCI6IFs4NSwgMTA3LCA0N10sXHJcblx0XCJkYXJrb3JhbmdlXCI6IFsyNTUsIDE0MCwgMF0sXHJcblx0XCJkYXJrb3JjaGlkXCI6IFsxNTMsIDUwLCAyMDRdLFxyXG5cdFwiZGFya3JlZFwiOiBbMTM5LCAwLCAwXSxcclxuXHRcImRhcmtzYWxtb25cIjogWzIzMywgMTUwLCAxMjJdLFxyXG5cdFwiZGFya3NlYWdyZWVuXCI6IFsxNDMsIDE4OCwgMTQzXSxcclxuXHRcImRhcmtzbGF0ZWJsdWVcIjogWzcyLCA2MSwgMTM5XSxcclxuXHRcImRhcmtzbGF0ZWdyYXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3NsYXRlZ3JleVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrdHVycXVvaXNlXCI6IFswLCAyMDYsIDIwOV0sXHJcblx0XCJkYXJrdmlvbGV0XCI6IFsxNDgsIDAsIDIxMV0sXHJcblx0XCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcclxuXHRcImRlZXBza3libHVlXCI6IFswLCAxOTEsIDI1NV0sXHJcblx0XCJkaW1ncmF5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRpbWdyZXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZG9kZ2VyYmx1ZVwiOiBbMzAsIDE0NCwgMjU1XSxcclxuXHRcImZpcmVicmlja1wiOiBbMTc4LCAzNCwgMzRdLFxyXG5cdFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxyXG5cdFwiZm9yZXN0Z3JlZW5cIjogWzM0LCAxMzksIDM0XSxcclxuXHRcImZ1Y2hzaWFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcImdhaW5zYm9yb1wiOiBbMjIwLCAyMjAsIDIyMF0sXHJcblx0XCJnaG9zdHdoaXRlXCI6IFsyNDgsIDI0OCwgMjU1XSxcclxuXHRcImdvbGRcIjogWzI1NSwgMjE1LCAwXSxcclxuXHRcImdvbGRlbnJvZFwiOiBbMjE4LCAxNjUsIDMyXSxcclxuXHRcImdyYXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiZ3JlZW5cIjogWzAsIDEyOCwgMF0sXHJcblx0XCJncmVlbnllbGxvd1wiOiBbMTczLCAyNTUsIDQ3XSxcclxuXHRcImdyZXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiaG9uZXlkZXdcIjogWzI0MCwgMjU1LCAyNDBdLFxyXG5cdFwiaG90cGlua1wiOiBbMjU1LCAxMDUsIDE4MF0sXHJcblx0XCJpbmRpYW5yZWRcIjogWzIwNSwgOTIsIDkyXSxcclxuXHRcImluZGlnb1wiOiBbNzUsIDAsIDEzMF0sXHJcblx0XCJpdm9yeVwiOiBbMjU1LCAyNTUsIDI0MF0sXHJcblx0XCJraGFraVwiOiBbMjQwLCAyMzAsIDE0MF0sXHJcblx0XCJsYXZlbmRlclwiOiBbMjMwLCAyMzAsIDI1MF0sXHJcblx0XCJsYXZlbmRlcmJsdXNoXCI6IFsyNTUsIDI0MCwgMjQ1XSxcclxuXHRcImxhd25ncmVlblwiOiBbMTI0LCAyNTIsIDBdLFxyXG5cdFwibGVtb25jaGlmZm9uXCI6IFsyNTUsIDI1MCwgMjA1XSxcclxuXHRcImxpZ2h0Ymx1ZVwiOiBbMTczLCAyMTYsIDIzMF0sXHJcblx0XCJsaWdodGNvcmFsXCI6IFsyNDAsIDEyOCwgMTI4XSxcclxuXHRcImxpZ2h0Y3lhblwiOiBbMjI0LCAyNTUsIDI1NV0sXHJcblx0XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwLCAyNTAsIDIxMF0sXHJcblx0XCJsaWdodGdyYXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRncmVlblwiOiBbMTQ0LCAyMzgsIDE0NF0sXHJcblx0XCJsaWdodGdyZXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRwaW5rXCI6IFsyNTUsIDE4MiwgMTkzXSxcclxuXHRcImxpZ2h0c2FsbW9uXCI6IFsyNTUsIDE2MCwgMTIyXSxcclxuXHRcImxpZ2h0c2VhZ3JlZW5cIjogWzMyLCAxNzgsIDE3MF0sXHJcblx0XCJsaWdodHNreWJsdWVcIjogWzEzNSwgMjA2LCAyNTBdLFxyXG5cdFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzdGVlbGJsdWVcIjogWzE3NiwgMTk2LCAyMjJdLFxyXG5cdFwibGlnaHR5ZWxsb3dcIjogWzI1NSwgMjU1LCAyMjRdLFxyXG5cdFwibGltZVwiOiBbMCwgMjU1LCAwXSxcclxuXHRcImxpbWVncmVlblwiOiBbNTAsIDIwNSwgNTBdLFxyXG5cdFwibGluZW5cIjogWzI1MCwgMjQwLCAyMzBdLFxyXG5cdFwibWFnZW50YVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwibWFyb29uXCI6IFsxMjgsIDAsIDBdLFxyXG5cdFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyLCAyMDUsIDE3MF0sXHJcblx0XCJtZWRpdW1ibHVlXCI6IFswLCAwLCAyMDVdLFxyXG5cdFwibWVkaXVtb3JjaGlkXCI6IFsxODYsIDg1LCAyMTFdLFxyXG5cdFwibWVkaXVtcHVycGxlXCI6IFsxNDcsIDExMiwgMjE5XSxcclxuXHRcIm1lZGl1bXNlYWdyZWVuXCI6IFs2MCwgMTc5LCAxMTNdLFxyXG5cdFwibWVkaXVtc2xhdGVibHVlXCI6IFsxMjMsIDEwNCwgMjM4XSxcclxuXHRcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAsIDE1NF0sXHJcblx0XCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXHJcblx0XCJtZWRpdW12aW9sZXRyZWRcIjogWzE5OSwgMjEsIDEzM10sXHJcblx0XCJtaWRuaWdodGJsdWVcIjogWzI1LCAyNSwgMTEyXSxcclxuXHRcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXHJcblx0XCJtaXN0eXJvc2VcIjogWzI1NSwgMjI4LCAyMjVdLFxyXG5cdFwibW9jY2FzaW5cIjogWzI1NSwgMjI4LCAxODFdLFxyXG5cdFwibmF2YWpvd2hpdGVcIjogWzI1NSwgMjIyLCAxNzNdLFxyXG5cdFwibmF2eVwiOiBbMCwgMCwgMTI4XSxcclxuXHRcIm9sZGxhY2VcIjogWzI1MywgMjQ1LCAyMzBdLFxyXG5cdFwib2xpdmVcIjogWzEyOCwgMTI4LCAwXSxcclxuXHRcIm9saXZlZHJhYlwiOiBbMTA3LCAxNDIsIDM1XSxcclxuXHRcIm9yYW5nZVwiOiBbMjU1LCAxNjUsIDBdLFxyXG5cdFwib3JhbmdlcmVkXCI6IFsyNTUsIDY5LCAwXSxcclxuXHRcIm9yY2hpZFwiOiBbMjE4LCAxMTIsIDIxNF0sXHJcblx0XCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsIDIzMiwgMTcwXSxcclxuXHRcInBhbGVncmVlblwiOiBbMTUyLCAyNTEsIDE1Ml0sXHJcblx0XCJwYWxldHVycXVvaXNlXCI6IFsxNzUsIDIzOCwgMjM4XSxcclxuXHRcInBhbGV2aW9sZXRyZWRcIjogWzIxOSwgMTEyLCAxNDddLFxyXG5cdFwicGFwYXlhd2hpcFwiOiBbMjU1LCAyMzksIDIxM10sXHJcblx0XCJwZWFjaHB1ZmZcIjogWzI1NSwgMjE4LCAxODVdLFxyXG5cdFwicGVydVwiOiBbMjA1LCAxMzMsIDYzXSxcclxuXHRcInBpbmtcIjogWzI1NSwgMTkyLCAyMDNdLFxyXG5cdFwicGx1bVwiOiBbMjIxLCAxNjAsIDIyMV0sXHJcblx0XCJwb3dkZXJibHVlXCI6IFsxNzYsIDIyNCwgMjMwXSxcclxuXHRcInB1cnBsZVwiOiBbMTI4LCAwLCAxMjhdLFxyXG5cdFwicmViZWNjYXB1cnBsZVwiOiBbMTAyLCA1MSwgMTUzXSxcclxuXHRcInJlZFwiOiBbMjU1LCAwLCAwXSxcclxuXHRcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXHJcblx0XCJyb3lhbGJsdWVcIjogWzY1LCAxMDUsIDIyNV0sXHJcblx0XCJzYWRkbGVicm93blwiOiBbMTM5LCA2OSwgMTldLFxyXG5cdFwic2FsbW9uXCI6IFsyNTAsIDEyOCwgMTE0XSxcclxuXHRcInNhbmR5YnJvd25cIjogWzI0NCwgMTY0LCA5Nl0sXHJcblx0XCJzZWFncmVlblwiOiBbNDYsIDEzOSwgODddLFxyXG5cdFwic2Vhc2hlbGxcIjogWzI1NSwgMjQ1LCAyMzhdLFxyXG5cdFwic2llbm5hXCI6IFsxNjAsIDgyLCA0NV0sXHJcblx0XCJzaWx2ZXJcIjogWzE5MiwgMTkyLCAxOTJdLFxyXG5cdFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXHJcblx0XCJzbGF0ZWJsdWVcIjogWzEwNiwgOTAsIDIwNV0sXHJcblx0XCJzbGF0ZWdyYXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic2xhdGVncmV5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNub3dcIjogWzI1NSwgMjUwLCAyNTBdLFxyXG5cdFwic3ByaW5nZ3JlZW5cIjogWzAsIDI1NSwgMTI3XSxcclxuXHRcInN0ZWVsYmx1ZVwiOiBbNzAsIDEzMCwgMTgwXSxcclxuXHRcInRhblwiOiBbMjEwLCAxODAsIDE0MF0sXHJcblx0XCJ0ZWFsXCI6IFswLCAxMjgsIDEyOF0sXHJcblx0XCJ0aGlzdGxlXCI6IFsyMTYsIDE5MSwgMjE2XSxcclxuXHRcInRvbWF0b1wiOiBbMjU1LCA5OSwgNzFdLFxyXG5cdFwidHVycXVvaXNlXCI6IFs2NCwgMjI0LCAyMDhdLFxyXG5cdFwidmlvbGV0XCI6IFsyMzgsIDEzMCwgMjM4XSxcclxuXHRcIndoZWF0XCI6IFsyNDUsIDIyMiwgMTc5XSxcclxuXHRcIndoaXRlXCI6IFsyNTUsIDI1NSwgMjU1XSxcclxuXHRcIndoaXRlc21va2VcIjogWzI0NSwgMjQ1LCAyNDVdLFxyXG5cdFwieWVsbG93XCI6IFsyNTUsIDI1NSwgMF0sXHJcblx0XCJ5ZWxsb3dncmVlblwiOiBbMTU0LCAyMDUsIDUwXVxyXG59O1xyXG4iXX0=
},{}],10:[function(require,module,exports){
'use strict';

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }

  return str.replace(matchOperatorsRe, '\\$&');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1hdGNoT3BlcmF0b3JzUmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3RyIiwiVHlwZUVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsZ0JBQWdCLEdBQUcscUJBQXZCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBQy9CLE1BQUksT0FBT0EsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzVCLFVBQU0sSUFBSUMsU0FBSixDQUFjLG1CQUFkLENBQU47QUFDQTs7QUFFRCxTQUFPRCxHQUFHLENBQUNFLE9BQUosQ0FBWUwsZ0JBQVosRUFBOEIsTUFBOUIsQ0FBUDtBQUNBLENBTkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBtYXRjaE9wZXJhdG9yc1JlID0gL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBzdHJpbmcnKTtcblx0fVxuXG5cdHJldHVybiBzdHIucmVwbGFjZShtYXRjaE9wZXJhdG9yc1JlLCAnXFxcXCQmJyk7XG59O1xuIl19
},{}],11:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

process.nextTick = function () {
  var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
  var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

  if (canSetImmediate) {
    return function (f) {
      return window.setImmediate(f);
    };
  }

  if (canPost) {
    var queue = [];
    window.addEventListener('message', function (ev) {
      var source = ev.source;

      if ((source === window || source === null) && ev.data === 'process-tick') {
        ev.stopPropagation();

        if (queue.length > 0) {
          var fn = queue.shift();
          fn();
        }
      }
    }, true);
    return function nextTick(fn) {
      queue.push(fn);
      window.postMessage('process-tick', '*');
    };
  }

  return function nextTick(fn) {
    setTimeout(fn, 0);
  };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
  throw new Error('process.binding is not supported');
}; // TODO(shtylman)


process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLEVBQS9COztBQUVBRixPQUFPLENBQUNHLFFBQVIsR0FBb0IsWUFBWTtBQUM1QixNQUFJQyxlQUFlLEdBQUcsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUNuQkEsTUFBTSxDQUFDQyxZQURWO0FBRUEsTUFBSUMsT0FBTyxHQUFHLE9BQU9GLE1BQVAsS0FBa0IsV0FBbEIsSUFDWEEsTUFBTSxDQUFDRyxXQURJLElBQ1dILE1BQU0sQ0FBQ0ksZ0JBRGhDOztBQUlBLE1BQUlMLGVBQUosRUFBcUI7QUFDakIsV0FBTyxVQUFVTSxDQUFWLEVBQWE7QUFBRSxhQUFPTCxNQUFNLENBQUNDLFlBQVAsQ0FBb0JJLENBQXBCLENBQVA7QUFBK0IsS0FBckQ7QUFDSDs7QUFFRCxNQUFJSCxPQUFKLEVBQWE7QUFDVCxRQUFJSSxLQUFLLEdBQUcsRUFBWjtBQUNBTixJQUFBQSxNQUFNLENBQUNJLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLFVBQVVHLEVBQVYsRUFBYztBQUM3QyxVQUFJQyxNQUFNLEdBQUdELEVBQUUsQ0FBQ0MsTUFBaEI7O0FBQ0EsVUFBSSxDQUFDQSxNQUFNLEtBQUtSLE1BQVgsSUFBcUJRLE1BQU0sS0FBSyxJQUFqQyxLQUEwQ0QsRUFBRSxDQUFDRSxJQUFILEtBQVksY0FBMUQsRUFBMEU7QUFDdEVGLFFBQUFBLEVBQUUsQ0FBQ0csZUFBSDs7QUFDQSxZQUFJSixLQUFLLENBQUNLLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQixjQUFJQyxFQUFFLEdBQUdOLEtBQUssQ0FBQ08sS0FBTixFQUFUO0FBQ0FELFVBQUFBLEVBQUU7QUFDTDtBQUNKO0FBQ0osS0FURCxFQVNHLElBVEg7QUFXQSxXQUFPLFNBQVNkLFFBQVQsQ0FBa0JjLEVBQWxCLEVBQXNCO0FBQ3pCTixNQUFBQSxLQUFLLENBQUNRLElBQU4sQ0FBV0YsRUFBWDtBQUNBWixNQUFBQSxNQUFNLENBQUNHLFdBQVAsQ0FBbUIsY0FBbkIsRUFBbUMsR0FBbkM7QUFDSCxLQUhEO0FBSUg7O0FBRUQsU0FBTyxTQUFTTCxRQUFULENBQWtCYyxFQUFsQixFQUFzQjtBQUN6QkcsSUFBQUEsVUFBVSxDQUFDSCxFQUFELEVBQUssQ0FBTCxDQUFWO0FBQ0gsR0FGRDtBQUdILENBakNrQixFQUFuQjs7QUFtQ0FqQixPQUFPLENBQUNxQixLQUFSLEdBQWdCLFNBQWhCO0FBQ0FyQixPQUFPLENBQUNzQixPQUFSLEdBQWtCLElBQWxCO0FBQ0F0QixPQUFPLENBQUN1QixHQUFSLEdBQWMsRUFBZDtBQUNBdkIsT0FBTyxDQUFDd0IsSUFBUixHQUFlLEVBQWY7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQixDQUFFOztBQUVsQnpCLE9BQU8sQ0FBQzBCLEVBQVIsR0FBYUQsSUFBYjtBQUNBekIsT0FBTyxDQUFDMkIsV0FBUixHQUFzQkYsSUFBdEI7QUFDQXpCLE9BQU8sQ0FBQzRCLElBQVIsR0FBZUgsSUFBZjtBQUNBekIsT0FBTyxDQUFDNkIsR0FBUixHQUFjSixJQUFkO0FBQ0F6QixPQUFPLENBQUM4QixjQUFSLEdBQXlCTCxJQUF6QjtBQUNBekIsT0FBTyxDQUFDK0Isa0JBQVIsR0FBNkJOLElBQTdCO0FBQ0F6QixPQUFPLENBQUNnQyxJQUFSLEdBQWVQLElBQWY7O0FBRUF6QixPQUFPLENBQUNpQyxPQUFSLEdBQWtCLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsUUFBTSxJQUFJQyxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNILENBRkQsQyxDQUlBOzs7QUFDQW5DLE9BQU8sQ0FBQ29DLEdBQVIsR0FBYyxZQUFZO0FBQUUsU0FBTyxHQUFQO0FBQVksQ0FBeEM7O0FBQ0FwQyxPQUFPLENBQUNxQyxLQUFSLEdBQWdCLFVBQVVDLEdBQVYsRUFBZTtBQUMzQixRQUFNLElBQUlILEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxuXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnByb2Nlc3MubmV4dFRpY2sgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYW5TZXRJbW1lZGlhdGUgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIGNhblBvc3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICYmIHdpbmRvdy5wb3N0TWVzc2FnZSAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lclxuICAgIDtcblxuICAgIGlmIChjYW5TZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmKSB7IHJldHVybiB3aW5kb3cuc2V0SW1tZWRpYXRlKGYpIH07XG4gICAgfVxuXG4gICAgaWYgKGNhblBvc3QpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gW107XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gZXYuc291cmNlO1xuICAgICAgICAgICAgaWYgKChzb3VyY2UgPT09IHdpbmRvdyB8fCBzb3VyY2UgPT09IG51bGwpICYmIGV2LmRhdGEgPT09ICdwcm9jZXNzLXRpY2snKSB7XG4gICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZuID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoJ3Byb2Nlc3MtdGljaycsICcqJyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59KSgpO1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuIl19
},{}],12:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
    /* global define */
  } else if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.moo = factory();
  }
})(this, function () {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty; // polyfill assign(), so we support IE9+

  var assign = typeof Object.assign === 'function' ? Object.assign : // https://tc39.github.io/ecma262/#sec-object.assign
  function (target, sources) {
    if (target == null) {
      throw new TypeError('Target cannot be null or undefined');
    }

    target = Object(target);

    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      if (source == null) continue;

      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  var hasSticky = typeof new RegExp().sticky === 'boolean';
  /***************************************************************************/

  function isRegExp(o) {
    return o && o.constructor === RegExp;
  }

  function isObject(o) {
    return o && typeof o === 'object' && o.constructor !== RegExp && !Array.isArray(o);
  }

  function reEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  function reGroups(s) {
    var re = new RegExp('|' + s);
    return re.exec('').length - 1;
  }

  function reCapture(s) {
    return '(' + s + ')';
  }

  function reUnion(regexps) {
    var source = regexps.map(function (s) {
      return "(?:" + s + ")";
    }).join('|');
    return "(?:" + source + ")";
  }

  function regexpOrLiteral(obj) {
    if (typeof obj === 'string') {
      return '(?:' + reEscape(obj) + ')';
    } else if (isRegExp(obj)) {
      // TODO: consider /u support
      if (obj.ignoreCase) {
        throw new Error('RegExp /i flag not allowed');
      }

      if (obj.global) {
        throw new Error('RegExp /g flag is implied');
      }

      if (obj.sticky) {
        throw new Error('RegExp /y flag is implied');
      }

      if (obj.multiline) {
        throw new Error('RegExp /m flag is implied');
      }

      return obj.source;
    } else {
      throw new Error('not a pattern: ' + obj);
    }
  }

  function objectToRules(object) {
    var keys = Object.getOwnPropertyNames(object);
    var result = [];

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var thing = object[key];
      var rules = Array.isArray(thing) ? thing : [thing];
      var match = [];
      rules.forEach(function (rule) {
        if (isObject(rule)) {
          if (match.length) result.push(ruleOptions(key, match));
          result.push(ruleOptions(key, rule));
          match = [];
        } else {
          match.push(rule);
        }
      });
      if (match.length) result.push(ruleOptions(key, match));
    }

    return result;
  }

  function arrayToRules(array) {
    var result = [];

    for (var i = 0; i < array.length; i++) {
      var obj = array[i];

      if (!obj.name) {
        throw new Error('Rule has no name: ' + JSON.stringify(obj));
      }

      result.push(ruleOptions(obj.name, obj));
    }

    return result;
  }

  function ruleOptions(name, obj) {
    if (typeof obj !== 'object' || Array.isArray(obj) || isRegExp(obj)) {
      obj = {
        match: obj
      };
    } // nb. error implies lineBreaks


    var options = assign({
      tokenType: name,
      lineBreaks: !!obj.error,
      pop: false,
      next: null,
      push: null,
      error: false,
      value: null,
      getType: null
    }, obj); // convert to array

    var match = options.match;
    options.match = Array.isArray(match) ? match : match ? [match] : [];
    options.match.sort(function (a, b) {
      return isRegExp(a) && isRegExp(b) ? 0 : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length;
    });

    if (options.keywords) {
      options.getType = keywordTransform(options.keywords);
    }

    return options;
  }

  function compileRules(rules, hasStates) {
    rules = Array.isArray(rules) ? arrayToRules(rules) : objectToRules(rules);
    var errorRule = null;
    var groups = [];
    var parts = [];

    for (var i = 0; i < rules.length; i++) {
      var options = rules[i];

      if (options.error) {
        if (errorRule) {
          throw new Error("Multiple error rules not allowed: (for token '" + options.tokenType + "')");
        }

        errorRule = options;
      } // skip rules with no match


      if (options.match.length === 0) {
        continue;
      }

      groups.push(options); // convert to RegExp

      var pat = reUnion(options.match.map(regexpOrLiteral)); // validate

      var regexp = new RegExp(pat);

      if (regexp.test("")) {
        throw new Error("RegExp matches empty string: " + regexp);
      }

      var groupCount = reGroups(pat);

      if (groupCount > 0) {
        throw new Error("RegExp has capture groups: " + regexp + "\nUse (?: … ) instead");
      }

      if (!hasStates && (options.pop || options.push || options.next)) {
        throw new Error("State-switching options are not allowed in stateless lexers (for token '" + options.tokenType + "')");
      } // try and detect rules matching newlines


      if (!options.lineBreaks && regexp.test('\n')) {
        throw new Error('Rule should declare lineBreaks: ' + regexp);
      } // store regex


      parts.push(reCapture(pat));
    }

    var suffix = hasSticky ? '' : '|(?:)';
    var flags = hasSticky ? 'ym' : 'gm';
    var combined = new RegExp(reUnion(parts) + suffix, flags);
    return {
      regexp: combined,
      groups: groups,
      error: errorRule
    };
  }

  function compile(rules) {
    var result = compileRules(rules);
    return new Lexer({
      start: result
    }, 'start');
  }

  function compileStates(states, start) {
    var keys = Object.getOwnPropertyNames(states);
    if (!start) start = keys[0];
    var map = Object.create(null);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      map[key] = compileRules(states[key], true);
    }

    for (var i = 0; i < keys.length; i++) {
      var groups = map[keys[i]].groups;

      for (var j = 0; j < groups.length; j++) {
        var g = groups[j];
        var state = g && (g.push || g.next);

        if (state && !map[state]) {
          throw new Error("Missing state '" + state + "' (in token '" + g.tokenType + "' of state '" + keys[i] + "')");
        }

        if (g && g.pop && +g.pop !== 1) {
          throw new Error("pop must be 1 (in token '" + g.tokenType + "' of state '" + keys[i] + "')");
        }
      }
    }

    return new Lexer(map, start);
  }

  function keywordTransform(map) {
    var reverseMap = Object.create(null);
    var byLength = Object.create(null);
    var types = Object.getOwnPropertyNames(map);

    for (var i = 0; i < types.length; i++) {
      var tokenType = types[i];
      var item = map[tokenType];
      var keywordList = Array.isArray(item) ? item : [item];
      keywordList.forEach(function (keyword) {
        (byLength[keyword.length] = byLength[keyword.length] || []).push(keyword);

        if (typeof keyword !== 'string') {
          throw new Error("keyword must be string (in keyword '" + tokenType + "')");
        }

        reverseMap[keyword] = tokenType;
      });
    } // fast string lookup
    // https://jsperf.com/string-lookups


    function str(x) {
      return JSON.stringify(x);
    }

    var source = '';
    source += '(function(value) {\n';
    source += 'switch (value.length) {\n';

    for (var length in byLength) {
      var keywords = byLength[length];
      source += 'case ' + length + ':\n';
      source += 'switch (value) {\n';
      keywords.forEach(function (keyword) {
        var tokenType = reverseMap[keyword];
        source += 'case ' + str(keyword) + ': return ' + str(tokenType) + '\n';
      });
      source += '}\n';
    }

    source += '}\n';
    source += '})';
    return eval(source); // getType
  }
  /***************************************************************************/


  var Lexer = function (states, state) {
    this.startState = state;
    this.states = states;
    this.buffer = '';
    this.stack = [];
    this.reset();
  };

  Lexer.prototype.reset = function (data, info) {
    this.buffer = data || '';
    this.index = 0;
    this.line = info ? info.line : 1;
    this.col = info ? info.col : 1;
    this.setState(info ? info.state : this.startState);
    return this;
  };

  Lexer.prototype.save = function () {
    return {
      line: this.line,
      col: this.col,
      state: this.state
    };
  };

  Lexer.prototype.setState = function (state) {
    if (!state || this.state === state) return;
    this.state = state;
    var info = this.states[state];
    this.groups = info.groups;
    this.error = info.error || {
      lineBreaks: true,
      shouldThrow: true
    };
    this.re = info.regexp;
  };

  Lexer.prototype.popState = function () {
    this.setState(this.stack.pop());
  };

  Lexer.prototype.pushState = function (state) {
    this.stack.push(this.state);
    this.setState(state);
  };

  Lexer.prototype._eat = hasSticky ? function (re) {
    // assume re is /y
    return re.exec(this.buffer);
  } : function (re) {
    // assume re is /g
    var match = re.exec(this.buffer); // will always match, since we used the |(?:) trick

    if (match[0].length === 0) {
      return null;
    }

    return match;
  };

  Lexer.prototype._getGroup = function (match) {
    if (match === null) {
      return -1;
    }

    var groupCount = this.groups.length;

    for (var i = 0; i < groupCount; i++) {
      if (match[i + 1] !== undefined) {
        return i;
      }
    }

    throw new Error('oops');
  };

  function tokenToString() {
    return this.value;
  }

  Lexer.prototype.next = function () {
    var re = this.re;
    var buffer = this.buffer;
    var index = re.lastIndex = this.index;

    if (index === buffer.length) {
      return; // EOF
    }

    var match = this._eat(re);

    var i = this._getGroup(match);

    var group, text;

    if (i === -1) {
      group = this.error; // consume rest of buffer

      text = buffer.slice(index);
    } else {
      text = match[0];
      group = this.groups[i];
    } // count line breaks


    var lineBreaks = 0;

    if (group.lineBreaks) {
      var matchNL = /\n/g;
      var nl = 1;

      if (text === '\n') {
        lineBreaks = 1;
      } else {
        while (matchNL.exec(text)) {
          lineBreaks++;
          nl = matchNL.lastIndex;
        }
      }
    }

    var token = {
      type: group.getType && group.getType(text) || group.tokenType,
      value: group.value ? group.value(text) : text,
      text: text,
      toString: tokenToString,
      offset: index,
      lineBreaks: lineBreaks,
      line: this.line,
      col: this.col // nb. adding more props to token object will make V8 sad!

    };
    var size = text.length;
    this.index += size;
    this.line += lineBreaks;

    if (lineBreaks !== 0) {
      this.col = size - nl + 1;
    } else {
      this.col += size;
    } // throw, if no rule with {error: true}


    if (group.shouldThrow) {
      throw new Error(this.formatError(token, "invalid syntax"));
    }

    if (group.pop) this.popState();else if (group.push) this.pushState(group.push);else if (group.next) this.setState(group.next);
    return token;
  };

  if (typeof Symbol !== 'undefined' && Symbol.iterator) {
    var LexerIterator = function (lexer) {
      this.lexer = lexer;
    };

    LexerIterator.prototype.next = function () {
      var token = this.lexer.next();
      return {
        value: token,
        done: !token
      };
    };

    LexerIterator.prototype[Symbol.iterator] = function () {
      return this;
    };

    Lexer.prototype[Symbol.iterator] = function () {
      return new LexerIterator(this);
    };
  }

  Lexer.prototype.formatError = function (token, message) {
    var value = token.value;
    var index = token.offset;
    var eol = token.lineBreaks ? value.indexOf('\n') : value.length;
    var start = Math.max(0, index - token.col + 1);
    var firstLine = this.buffer.substring(start, index + eol);
    message += " at line " + token.line + " col " + token.col + ":\n\n";
    message += "  " + firstLine + "\n";
    message += "  " + Array(token.col).join(" ") + "^";
    return message;
  };

  Lexer.prototype.clone = function () {
    return new Lexer(this.states, this.state);
  };

  Lexer.prototype.has = function (tokenType) {
    for (var s in this.states) {
      var groups = this.states[s].groups;

      for (var i = 0; i < groups.length; i++) {
        var group = groups[i];
        if (group.tokenType === tokenType) return true;

        if (group.keywords && hasOwnProperty.call(group.keywords, tokenType)) {
          return true;
        }
      }
    }

    return false;
  };

  return {
    compile: compile,
    states: compileStates,
    error: Object.freeze({
      error: true
    })
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],13:[function(require,module,exports){
(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.nearley = factory();
  }
})(this, function () {
  function Rule(name, symbols, postprocess) {
    this.id = ++Rule.highestId;
    this.name = name;
    this.symbols = symbols; // a list of literal | regex class | nonterminal

    this.postprocess = postprocess;
    return this;
  }

  Rule.highestId = 0;

  Rule.prototype.toString = function (withCursorAt) {
    function stringifySymbolSequence(e) {
      return e.literal ? JSON.stringify(e.literal) : e.type ? '%' + e.type : e.toString();
    }

    var symbolSequence = typeof withCursorAt === "undefined" ? this.symbols.map(stringifySymbolSequence).join(' ') : this.symbols.slice(0, withCursorAt).map(stringifySymbolSequence).join(' ') + " ● " + this.symbols.slice(withCursorAt).map(stringifySymbolSequence).join(' ');
    return this.name + " → " + symbolSequence;
  }; // a State is a rule at a position from a given starting point in the input stream (reference)


  function State(rule, dot, reference, wantedBy) {
    this.rule = rule;
    this.dot = dot;
    this.reference = reference;
    this.data = [];
    this.wantedBy = wantedBy;
    this.isComplete = this.dot === rule.symbols.length;
  }

  State.prototype.toString = function () {
    return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
  };

  State.prototype.nextState = function (child) {
    var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);
    state.left = this;
    state.right = child;

    if (state.isComplete) {
      state.data = state.build();
    }

    return state;
  };

  State.prototype.build = function () {
    var children = [];
    var node = this;

    do {
      children.push(node.right.data);
      node = node.left;
    } while (node.left);

    children.reverse();
    return children;
  };

  State.prototype.finish = function () {
    if (this.rule.postprocess) {
      this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
    }
  };

  function Column(grammar, index) {
    this.grammar = grammar;
    this.index = index;
    this.states = [];
    this.wants = {}; // states indexed by the non-terminal they expect

    this.scannable = []; // list of states that expect a token

    this.completed = {}; // states that are nullable
  }

  Column.prototype.process = function (nextColumn) {
    var states = this.states;
    var wants = this.wants;
    var completed = this.completed;

    for (var w = 0; w < states.length; w++) {
      // nb. we push() during iteration
      var state = states[w];

      if (state.isComplete) {
        state.finish();

        if (state.data !== Parser.fail) {
          // complete
          var wantedBy = state.wantedBy;

          for (var i = wantedBy.length; i--;) {
            // this line is hot
            var left = wantedBy[i];
            this.complete(left, state);
          } // special-case nullables


          if (state.reference === this.index) {
            // make sure future predictors of this rule get completed.
            var exp = state.rule.name;
            (this.completed[exp] = this.completed[exp] || []).push(state);
          }
        }
      } else {
        // queue scannable states
        var exp = state.rule.symbols[state.dot];

        if (typeof exp !== 'string') {
          this.scannable.push(state);
          continue;
        } // predict


        if (wants[exp]) {
          wants[exp].push(state);

          if (completed.hasOwnProperty(exp)) {
            var nulls = completed[exp];

            for (var i = 0; i < nulls.length; i++) {
              var right = nulls[i];
              this.complete(state, right);
            }
          }
        } else {
          wants[exp] = [state];
          this.predict(exp);
        }
      }
    }
  };

  Column.prototype.predict = function (exp) {
    var rules = this.grammar.byName[exp] || [];

    for (var i = 0; i < rules.length; i++) {
      var r = rules[i];
      var wantedBy = this.wants[exp];
      var s = new State(r, 0, this.index, wantedBy);
      this.states.push(s);
    }
  };

  Column.prototype.complete = function (left, right) {
    var copy = left.nextState(right);
    this.states.push(copy);
  };

  function Grammar(rules, start) {
    this.rules = rules;
    this.start = start || this.rules[0].name;
    var byName = this.byName = {};
    this.rules.forEach(function (rule) {
      if (!byName.hasOwnProperty(rule.name)) {
        byName[rule.name] = [];
      }

      byName[rule.name].push(rule);
    });
  } // So we can allow passing (rules, start) directly to Parser for backwards compatibility


  Grammar.fromCompiled = function (rules, start) {
    var lexer = rules.Lexer;

    if (rules.ParserStart) {
      start = rules.ParserStart;
      rules = rules.ParserRules;
    }

    var rules = rules.map(function (r) {
      return new Rule(r.name, r.symbols, r.postprocess);
    });
    var g = new Grammar(rules, start);
    g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable

    return g;
  };

  function StreamLexer() {
    this.reset("");
  }

  StreamLexer.prototype.reset = function (data, state) {
    this.buffer = data;
    this.index = 0;
    this.line = state ? state.line : 1;
    this.lastLineBreak = state ? -state.col : 0;
  };

  StreamLexer.prototype.next = function () {
    if (this.index < this.buffer.length) {
      var ch = this.buffer[this.index++];

      if (ch === '\n') {
        this.line += 1;
        this.lastLineBreak = this.index;
      }

      return {
        value: ch
      };
    }
  };

  StreamLexer.prototype.save = function () {
    return {
      line: this.line,
      col: this.index - this.lastLineBreak
    };
  };

  StreamLexer.prototype.formatError = function (token, message) {
    // nb. this gets called after consuming the offending token,
    // so the culprit is index-1
    var buffer = this.buffer;

    if (typeof buffer === 'string') {
      var nextLineBreak = buffer.indexOf('\n', this.index);
      if (nextLineBreak === -1) nextLineBreak = buffer.length;
      var line = buffer.substring(this.lastLineBreak, nextLineBreak);
      var col = this.index - this.lastLineBreak;
      message += " at line " + this.line + " col " + col + ":\n\n";
      message += "  " + line + "\n";
      message += "  " + Array(col).join(" ") + "^";
      return message;
    } else {
      return message + " at index " + (this.index - 1);
    }
  };

  function Parser(rules, start, options) {
    if (rules instanceof Grammar) {
      var grammar = rules;
      var options = start;
    } else {
      var grammar = Grammar.fromCompiled(rules, start);
    }

    this.grammar = grammar; // Read options

    this.options = {
      keepHistory: false,
      lexer: grammar.lexer || new StreamLexer()
    };

    for (var key in options || {}) {
      this.options[key] = options[key];
    } // Setup lexer


    this.lexer = this.options.lexer;
    this.lexerState = undefined; // Setup a table

    var column = new Column(grammar, 0);
    var table = this.table = [column]; // I could be expecting anything.

    column.wants[grammar.start] = [];
    column.predict(grammar.start); // TODO what if start rule is nullable?

    column.process();
    this.current = 0; // token index
  } // create a reserved token for indicating a parse fail


  Parser.fail = {};

  Parser.prototype.feed = function (chunk) {
    var lexer = this.lexer;
    lexer.reset(chunk, this.lexerState);
    var token;

    while (token = lexer.next()) {
      // We add new states to table[current+1]
      var column = this.table[this.current]; // GC unused states

      if (!this.options.keepHistory) {
        delete this.table[this.current - 1];
      }

      var n = this.current + 1;
      var nextColumn = new Column(this.grammar, n);
      this.table.push(nextColumn); // Advance all tokens that expect the symbol

      var literal = token.value;
      var value = lexer.constructor === StreamLexer ? token.value : token;
      var scannable = column.scannable;

      for (var w = scannable.length; w--;) {
        var state = scannable[w];
        var expect = state.rule.symbols[state.dot]; // Try to consume the token
        // either regex or literal

        if (expect.test ? expect.test(value) : expect.type ? expect.type === token.type : expect.literal === literal) {
          // Add it
          var next = state.nextState({
            data: value,
            token: token,
            isToken: true,
            reference: n - 1
          });
          nextColumn.states.push(next);
        }
      } // Next, for each of the rules, we either
      // (a) complete it, and try to see if the reference row expected that
      //     rule
      // (b) predict the next nonterminal it expects by adding that
      //     nonterminal's start state
      // To prevent duplication, we also keep track of rules we have already
      // added


      nextColumn.process(); // If needed, throw an error:

      if (nextColumn.states.length === 0) {
        // No states at all! This is not good.
        var message = this.lexer.formatError(token, "invalid syntax") + "\n";
        message += "Unexpected " + (token.type ? token.type + " token: " : "");
        message += JSON.stringify(token.value !== undefined ? token.value : token) + "\n";
        var err = new Error(message);
        err.offset = this.current;
        err.token = token;
        throw err;
      } // maybe save lexer state


      if (this.options.keepHistory) {
        column.lexerState = lexer.save();
      }

      this.current++;
    }

    if (column) {
      this.lexerState = lexer.save();
    } // Incrementally keep track of results


    this.results = this.finish(); // Allow chaining, for whatever it's worth

    return this;
  };

  Parser.prototype.save = function () {
    var column = this.table[this.current];
    column.lexerState = this.lexerState;
    return column;
  };

  Parser.prototype.restore = function (column) {
    var index = column.index;
    this.current = index;
    this.table[index] = column;
    this.table.splice(index + 1);
    this.lexerState = column.lexerState; // Incrementally keep track of results

    this.results = this.finish();
  }; // nb. deprecated: use save/restore instead!


  Parser.prototype.rewind = function (index) {
    if (!this.options.keepHistory) {
      throw new Error('set option `keepHistory` to enable rewinding');
    } // nb. recall column (table) indicies fall between token indicies.
    //        col 0   --   token 0   --   col 1


    this.restore(this.table[index]);
  };

  Parser.prototype.finish = function () {
    // Return the possible parsings
    var considerations = [];
    var start = this.grammar.start;
    var column = this.table[this.table.length - 1];
    column.states.forEach(function (t) {
      if (t.rule.name === start && t.dot === t.rule.symbols.length && t.reference === 0 && t.data !== Parser.fail) {
        considerations.push(t);
      }
    });
    return considerations.map(function (c) {
      return c.data;
    });
  };

  return {
    Parser: Parser,
    Grammar: Grammar,
    Rule: Rule
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5lYXJsZXkuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibmVhcmxleSIsIlJ1bGUiLCJuYW1lIiwic3ltYm9scyIsInBvc3Rwcm9jZXNzIiwiaWQiLCJoaWdoZXN0SWQiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIndpdGhDdXJzb3JBdCIsInN0cmluZ2lmeVN5bWJvbFNlcXVlbmNlIiwiZSIsImxpdGVyYWwiLCJKU09OIiwic3RyaW5naWZ5IiwidHlwZSIsInN5bWJvbFNlcXVlbmNlIiwibWFwIiwiam9pbiIsInNsaWNlIiwiU3RhdGUiLCJydWxlIiwiZG90IiwicmVmZXJlbmNlIiwid2FudGVkQnkiLCJkYXRhIiwiaXNDb21wbGV0ZSIsImxlbmd0aCIsIm5leHRTdGF0ZSIsImNoaWxkIiwic3RhdGUiLCJsZWZ0IiwicmlnaHQiLCJidWlsZCIsImNoaWxkcmVuIiwibm9kZSIsInB1c2giLCJyZXZlcnNlIiwiZmluaXNoIiwiUGFyc2VyIiwiZmFpbCIsIkNvbHVtbiIsImdyYW1tYXIiLCJpbmRleCIsInN0YXRlcyIsIndhbnRzIiwic2Nhbm5hYmxlIiwiY29tcGxldGVkIiwicHJvY2VzcyIsIm5leHRDb2x1bW4iLCJ3IiwiaSIsImNvbXBsZXRlIiwiZXhwIiwiaGFzT3duUHJvcGVydHkiLCJudWxscyIsInByZWRpY3QiLCJydWxlcyIsImJ5TmFtZSIsInIiLCJzIiwiY29weSIsIkdyYW1tYXIiLCJzdGFydCIsImZvckVhY2giLCJmcm9tQ29tcGlsZWQiLCJsZXhlciIsIkxleGVyIiwiUGFyc2VyU3RhcnQiLCJQYXJzZXJSdWxlcyIsImciLCJTdHJlYW1MZXhlciIsInJlc2V0IiwiYnVmZmVyIiwibGluZSIsImxhc3RMaW5lQnJlYWsiLCJjb2wiLCJuZXh0IiwiY2giLCJ2YWx1ZSIsInNhdmUiLCJmb3JtYXRFcnJvciIsInRva2VuIiwibWVzc2FnZSIsIm5leHRMaW5lQnJlYWsiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwiQXJyYXkiLCJvcHRpb25zIiwia2VlcEhpc3RvcnkiLCJrZXkiLCJsZXhlclN0YXRlIiwidW5kZWZpbmVkIiwiY29sdW1uIiwidGFibGUiLCJjdXJyZW50IiwiZmVlZCIsImNodW5rIiwibiIsImNvbnN0cnVjdG9yIiwiZXhwZWN0IiwidGVzdCIsImlzVG9rZW4iLCJlcnIiLCJFcnJvciIsIm9mZnNldCIsInJlc3VsdHMiLCJyZXN0b3JlIiwic3BsaWNlIiwicmV3aW5kIiwiY29uc2lkZXJhdGlvbnMiLCJ0IiwiYyJdLCJtYXBwaW5ncyI6IkFBQUMsV0FBU0EsSUFBVCxFQUFlQyxPQUFmLEVBQXdCO0FBQ3JCLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUFsQixJQUE4QkEsTUFBTSxDQUFDQyxPQUF6QyxFQUFrRDtBQUM5Q0QsSUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixPQUFPLEVBQXhCO0FBQ0gsR0FGRCxNQUVPO0FBQ0hELElBQUFBLElBQUksQ0FBQ0ksT0FBTCxHQUFlSCxPQUFPLEVBQXRCO0FBQ0g7QUFDSixDQU5BLEVBTUMsSUFORCxFQU1PLFlBQVc7QUFFZixXQUFTSSxJQUFULENBQWNDLElBQWQsRUFBb0JDLE9BQXBCLEVBQTZCQyxXQUE3QixFQUEwQztBQUN0QyxTQUFLQyxFQUFMLEdBQVUsRUFBRUosSUFBSSxDQUFDSyxTQUFqQjtBQUNBLFNBQUtKLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZixDQUhzQyxDQUdQOztBQUMvQixTQUFLQyxXQUFMLEdBQW1CQSxXQUFuQjtBQUNBLFdBQU8sSUFBUDtBQUNIOztBQUNESCxFQUFBQSxJQUFJLENBQUNLLFNBQUwsR0FBaUIsQ0FBakI7O0FBRUFMLEVBQUFBLElBQUksQ0FBQ00sU0FBTCxDQUFlQyxRQUFmLEdBQTBCLFVBQVNDLFlBQVQsRUFBdUI7QUFDN0MsYUFBU0MsdUJBQVQsQ0FBa0NDLENBQWxDLEVBQXFDO0FBQ2pDLGFBQU9BLENBQUMsQ0FBQ0MsT0FBRixHQUFZQyxJQUFJLENBQUNDLFNB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QVFBLFdBQU9ELGNBQWMsQ0FBQzdGLEdBQWYsQ0FBbUIsVUFBUytGLENBQVQsRUFBWTtBQUFDLGFBQU9BLENBQUMsQ0FBQ3ZGLElBQVQ7QUFBZ0IsS0FBaEQsQ0FBUDtBQUNILEdBZEQ7O0FBZ0JBLFNBQU87QUFDSGMsSUFBQUEsTUFBTSxFQUFFQSxNQURMO0FBRUh1QixJQUFBQSxPQUFPLEVBQUVBLE9BRk47QUFHSDdELElBQUFBLElBQUksRUFBRUE7QUFISCxHQUFQO0FBTUgsQ0FyWUEsQ0FBRCIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubmVhcmxleSA9IGZhY3RvcnkoKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgZnVuY3Rpb24gUnVsZShuYW1lLCBzeW1ib2xzLCBwb3N0cHJvY2Vzcykge1xuICAgICAgICB0aGlzLmlkID0gKytSdWxlLmhpZ2hlc3RJZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zeW1ib2xzID0gc3ltYm9sczsgICAgICAgIC8vIGEgbGlzdCBvZiBsaXRlcmFsIHwgcmVnZXggY2xhc3MgfCBub250ZXJtaW5hbFxuICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzID0gcG9zdHByb2Nlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBSdWxlLmhpZ2hlc3RJZCA9IDA7XG5cbiAgICBSdWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKHdpdGhDdXJzb3JBdCkge1xuICAgICAgICBmdW5jdGlvbiBzdHJpbmdpZnlTeW1ib2xTZXF1ZW5jZSAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGUubGl0ZXJhbCA/IEpTT04uc3RyaW5naWZ5KGUubGl0ZXJhbCkgOlxuICAgICAgICAgICAgICAgICAgIGUudHlwZSA/ICclJyArIGUudHlwZSA6IGUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3ltYm9sU2VxdWVuY2UgPSAodHlwZW9mIHdpdGhDdXJzb3JBdCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN5bWJvbHMubWFwKHN0cmluZ2lmeVN5bWJvbFNlcXVlbmNlKS5qb2luKCcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoICAgdGhpcy5zeW1ib2xzLnNsaWNlKDAsIHdpdGhDdXJzb3JBdCkubWFwKHN0cmluZ2lmeVN5bWJvbFNlcXVlbmNlKS5qb2luKCcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgXCIg4pePIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMuc3ltYm9scy5zbGljZSh3aXRoQ3Vyc29yQXQpLm1hcChzdHJpbmdpZnlTeW1ib2xTZXF1ZW5jZSkuam9pbignICcpICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIg4oaSIFwiICsgc3ltYm9sU2VxdWVuY2U7XG4gICAgfVxuXG5cbiAgICAvLyBhIFN0YXRlIGlzIGEgcnVsZSBhdCBhIHBvc2l0aW9uIGZyb20gYSBnaXZlbiBzdGFydGluZyBwb2ludCBpbiB0aGUgaW5wdXQgc3RyZWFtIChyZWZlcmVuY2UpXG4gICAgZnVuY3Rpb24gU3RhdGUocnVsZSwgZG90LCByZWZlcmVuY2UsIHdhbnRlZEJ5KSB7XG4gICAgICAgIHRoaXMucnVsZSA9IHJ1bGU7XG4gICAgICAgIHRoaXMuZG90ID0gZG90O1xuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMud2FudGVkQnkgPSB3YW50ZWRCeTtcbiAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gdGhpcy5kb3QgPT09IHJ1bGUuc3ltYm9scy5sZW5ndGg7XG4gICAgfVxuXG4gICAgU3RhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIntcIiArIHRoaXMucnVsZS50b1N0cmluZyh0aGlzLmRvdCkgKyBcIn0sIGZyb206IFwiICsgKHRoaXMucmVmZXJlbmNlIHx8IDApO1xuICAgIH07XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUubmV4dFN0YXRlID0gZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKHRoaXMucnVsZSwgdGhpcy5kb3QgKyAxLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy53YW50ZWRCeSk7XG4gICAgICAgIHN0YXRlLmxlZnQgPSB0aGlzO1xuICAgICAgICBzdGF0ZS5yaWdodCA9IGNoaWxkO1xuICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgc3RhdGUuZGF0YSA9IHN0YXRlLmJ1aWxkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH07XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgICAgIHZhciBub2RlID0gdGhpcztcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChub2RlLnJpZ2h0LmRhdGEpO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUubGVmdDtcbiAgICAgICAgfSB3aGlsZSAobm9kZS5sZWZ0KTtcbiAgICAgICAgY2hpbGRyZW4ucmV2ZXJzZSgpO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfTtcblxuICAgIFN0YXRlLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucnVsZS5wb3N0cHJvY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5ydWxlLnBvc3Rwcm9jZXNzKHRoaXMuZGF0YSwgdGhpcy5yZWZlcmVuY2UsIFBhcnNlci5mYWlsKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIENvbHVtbihncmFtbWFyLCBpbmRleCkge1xuICAgICAgICB0aGlzLmdyYW1tYXIgPSBncmFtbWFyO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuc3RhdGVzID0gW107XG4gICAgICAgIHRoaXMud2FudHMgPSB7fTsgLy8gc3RhdGVzIGluZGV4ZWQgYnkgdGhlIG5vbi10ZXJtaW5hbCB0aGV5IGV4cGVjdFxuICAgICAgICB0aGlzLnNjYW5uYWJsZSA9IFtdOyAvLyBsaXN0IG9mIHN0YXRlcyB0aGF0IGV4cGVjdCBhIHRva2VuXG4gICAgICAgIHRoaXMuY29tcGxldGVkID0ge307IC8vIHN0YXRlcyB0aGF0IGFyZSBudWxsYWJsZVxuICAgIH1cblxuXG4gICAgQ29sdW1uLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24obmV4dENvbHVtbikge1xuICAgICAgICB2YXIgc3RhdGVzID0gdGhpcy5zdGF0ZXM7XG4gICAgICAgIHZhciB3YW50cyA9IHRoaXMud2FudHM7XG4gICAgICAgIHZhciBjb21wbGV0ZWQgPSB0aGlzLmNvbXBsZXRlZDtcblxuICAgICAgICBmb3IgKHZhciB3ID0gMDsgdyA8IHN0YXRlcy5sZW5ndGg7IHcrKykgeyAvLyBuYi4gd2UgcHVzaCgpIGR1cmluZyBpdGVyYXRpb25cbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlc1t3XTtcblxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5maW5pc2goKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuZGF0YSAhPT0gUGFyc2VyLmZhaWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcGxldGVcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhbnRlZEJ5ID0gc3RhdGUud2FudGVkQnk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB3YW50ZWRCeS5sZW5ndGg7IGktLTsgKSB7IC8vIHRoaXMgbGluZSBpcyBob3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gd2FudGVkQnlbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlKGxlZnQsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpYWwtY2FzZSBudWxsYWJsZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnJlZmVyZW5jZSA9PT0gdGhpcy5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGZ1dHVyZSBwcmVkaWN0b3JzIG9mIHRoaXMgcnVsZSBnZXQgY29tcGxldGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cCA9IHN0YXRlLnJ1bGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNvbXBsZXRlZFtleHBdID0gdGhpcy5jb21wbGV0ZWRbZXhwXSB8fCBbXSkucHVzaChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcXVldWUgc2Nhbm5hYmxlIHN0YXRlc1xuICAgICAgICAgICAgICAgIHZhciBleHAgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV4cCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FubmFibGUucHVzaChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHByZWRpY3RcbiAgICAgICAgICAgICAgICBpZiAod2FudHNbZXhwXSkge1xuICAgICAgICAgICAgICAgICAgICB3YW50c1tleHBdLnB1c2goc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQuaGFzT3duUHJvcGVydHkoZXhwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bGxzID0gY29tcGxldGVkW2V4cF07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gbnVsbHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZShzdGF0ZSwgcmlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2FudHNbZXhwXSA9IFtzdGF0ZV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJlZGljdChleHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbHVtbi5wcm90b3R5cGUucHJlZGljdCA9IGZ1bmN0aW9uKGV4cCkge1xuICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLmdyYW1tYXIuYnlOYW1lW2V4cF0gfHwgW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHIgPSBydWxlc1tpXTtcbiAgICAgICAgICAgIHZhciB3YW50ZWRCeSA9IHRoaXMud2FudHNbZXhwXTtcbiAgICAgICAgICAgIHZhciBzID0gbmV3IFN0YXRlKHIsIDAsIHRoaXMuaW5kZXgsIHdhbnRlZEJ5KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVzLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb2x1bW4ucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICAgICAgdmFyIGNvcHkgPSBsZWZ0Lm5leHRTdGF0ZShyaWdodCk7XG4gICAgICAgIHRoaXMuc3RhdGVzLnB1c2goY29weSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBHcmFtbWFyKHJ1bGVzLCBzdGFydCkge1xuICAgICAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBzdGFydCB8fCB0aGlzLnJ1bGVzWzBdLm5hbWU7XG4gICAgICAgIHZhciBieU5hbWUgPSB0aGlzLmJ5TmFtZSA9IHt9O1xuICAgICAgICB0aGlzLnJ1bGVzLmZvckVhY2goZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgaWYgKCFieU5hbWUuaGFzT3duUHJvcGVydHkocnVsZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgIGJ5TmFtZVtydWxlLm5hbWVdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBieU5hbWVbcnVsZS5uYW1lXS5wdXNoKHJ1bGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTbyB3ZSBjYW4gYWxsb3cgcGFzc2luZyAocnVsZXMsIHN0YXJ0KSBkaXJlY3RseSB0byBQYXJzZXIgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgR3JhbW1hci5mcm9tQ29tcGlsZWQgPSBmdW5jdGlvbihydWxlcywgc3RhcnQpIHtcbiAgICAgICAgdmFyIGxleGVyID0gcnVsZXMuTGV4ZXI7XG4gICAgICAgIGlmIChydWxlcy5QYXJzZXJTdGFydCkge1xuICAgICAgICAgIHN0YXJ0ID0gcnVsZXMuUGFyc2VyU3RhcnQ7XG4gICAgICAgICAgcnVsZXMgPSBydWxlcy5QYXJzZXJSdWxlcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcnVsZXMgPSBydWxlcy5tYXAoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIChuZXcgUnVsZShyLm5hbWUsIHIuc3ltYm9scywgci5wb3N0cHJvY2VzcykpOyB9KTtcbiAgICAgICAgdmFyIGcgPSBuZXcgR3JhbW1hcihydWxlcywgc3RhcnQpO1xuICAgICAgICBnLmxleGVyID0gbGV4ZXI7IC8vIG5iLiBzdG9yaW5nIGxleGVyIG9uIEdyYW1tYXIgaXMgaWZmeSwgYnV0IHVuYXZvaWRhYmxlXG4gICAgICAgIHJldHVybiBnO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gU3RyZWFtTGV4ZXIoKSB7XG4gICAgICB0aGlzLnJlc2V0KFwiXCIpO1xuICAgIH1cblxuICAgIFN0cmVhbUxleGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKGRhdGEsIHN0YXRlKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZGF0YTtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMubGluZSA9IHN0YXRlID8gc3RhdGUubGluZSA6IDE7XG4gICAgICAgIHRoaXMubGFzdExpbmVCcmVhayA9IHN0YXRlID8gLXN0YXRlLmNvbCA6IDA7XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPCB0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuYnVmZmVyW3RoaXMuaW5kZXgrK107XG4gICAgICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgIHRoaXMubGluZSArPSAxO1xuICAgICAgICAgICAgICB0aGlzLmxhc3RMaW5lQnJlYWsgPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHt2YWx1ZTogY2h9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgY29sOiB0aGlzLmluZGV4IC0gdGhpcy5sYXN0TGluZUJyZWFrLFxuICAgICAgfVxuICAgIH1cblxuICAgIFN0cmVhbUxleGVyLnByb3RvdHlwZS5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uKHRva2VuLCBtZXNzYWdlKSB7XG4gICAgICAgIC8vIG5iLiB0aGlzIGdldHMgY2FsbGVkIGFmdGVyIGNvbnN1bWluZyB0aGUgb2ZmZW5kaW5nIHRva2VuLFxuICAgICAgICAvLyBzbyB0aGUgY3VscHJpdCBpcyBpbmRleC0xXG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgaWYgKHR5cGVvZiBidWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5pbmRleE9mKCdcXG4nLCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIGlmIChuZXh0TGluZUJyZWFrID09PSAtMSkgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgbGluZSA9IGJ1ZmZlci5zdWJzdHJpbmcodGhpcy5sYXN0TGluZUJyZWFrLCBuZXh0TGluZUJyZWFrKVxuICAgICAgICAgICAgdmFyIGNvbCA9IHRoaXMuaW5kZXggLSB0aGlzLmxhc3RMaW5lQnJlYWs7XG4gICAgICAgICAgICBtZXNzYWdlICs9IFwiIGF0IGxpbmUgXCIgKyB0aGlzLmxpbmUgKyBcIiBjb2wgXCIgKyBjb2wgKyBcIjpcXG5cXG5cIjtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgIFwiICsgbGluZSArIFwiXFxuXCJcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgIFwiICsgQXJyYXkoY29sKS5qb2luKFwiIFwiKSArIFwiXlwiXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlICsgXCIgYXQgaW5kZXggXCIgKyAodGhpcy5pbmRleCAtIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBQYXJzZXIocnVsZXMsIHN0YXJ0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChydWxlcyBpbnN0YW5jZW9mIEdyYW1tYXIpIHtcbiAgICAgICAgICAgIHZhciBncmFtbWFyID0gcnVsZXM7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHN0YXJ0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGdyYW1tYXIgPSBHcmFtbWFyLmZyb21Db21waWxlZChydWxlcywgc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XG5cbiAgICAgICAgLy8gUmVhZCBvcHRpb25zXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGtlZXBIaXN0b3J5OiBmYWxzZSxcbiAgICAgICAgICAgIGxleGVyOiBncmFtbWFyLmxleGVyIHx8IG5ldyBTdHJlYW1MZXhlcixcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIChvcHRpb25zIHx8IHt9KSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBsZXhlclxuICAgICAgICB0aGlzLmxleGVyID0gdGhpcy5vcHRpb25zLmxleGVyO1xuICAgICAgICB0aGlzLmxleGVyU3RhdGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gU2V0dXAgYSB0YWJsZVxuICAgICAgICB2YXIgY29sdW1uID0gbmV3IENvbHVtbihncmFtbWFyLCAwKTtcbiAgICAgICAgdmFyIHRhYmxlID0gdGhpcy50YWJsZSA9IFtjb2x1bW5dO1xuXG4gICAgICAgIC8vIEkgY291bGQgYmUgZXhwZWN0aW5nIGFueXRoaW5nLlxuICAgICAgICBjb2x1bW4ud2FudHNbZ3JhbW1hci5zdGFydF0gPSBbXTtcbiAgICAgICAgY29sdW1uLnByZWRpY3QoZ3JhbW1hci5zdGFydCk7XG4gICAgICAgIC8vIFRPRE8gd2hhdCBpZiBzdGFydCBydWxlIGlzIG51bGxhYmxlP1xuICAgICAgICBjb2x1bW4ucHJvY2VzcygpO1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSAwOyAvLyB0b2tlbiBpbmRleFxuICAgIH1cblxuICAgIC8vIGNyZWF0ZSBhIHJlc2VydmVkIHRva2VuIGZvciBpbmRpY2F0aW5nIGEgcGFyc2UgZmFpbFxuICAgIFBhcnNlci5mYWlsID0ge307XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLmZlZWQgPSBmdW5jdGlvbihjaHVuaykge1xuICAgICAgICB2YXIgbGV4ZXIgPSB0aGlzLmxleGVyO1xuICAgICAgICBsZXhlci5yZXNldChjaHVuaywgdGhpcy5sZXhlclN0YXRlKTtcblxuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHdoaWxlICh0b2tlbiA9IGxleGVyLm5leHQoKSkge1xuICAgICAgICAgICAgLy8gV2UgYWRkIG5ldyBzdGF0ZXMgdG8gdGFibGVbY3VycmVudCsxXVxuICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGVbdGhpcy5jdXJyZW50XTtcblxuICAgICAgICAgICAgLy8gR0MgdW51c2VkIHN0YXRlc1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMua2VlcEhpc3RvcnkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50YWJsZVt0aGlzLmN1cnJlbnQgLSAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG4gPSB0aGlzLmN1cnJlbnQgKyAxO1xuICAgICAgICAgICAgdmFyIG5leHRDb2x1bW4gPSBuZXcgQ29sdW1uKHRoaXMuZ3JhbW1hciwgbik7XG4gICAgICAgICAgICB0aGlzLnRhYmxlLnB1c2gobmV4dENvbHVtbik7XG5cbiAgICAgICAgICAgIC8vIEFkdmFuY2UgYWxsIHRva2VucyB0aGF0IGV4cGVjdCB0aGUgc3ltYm9sXG4gICAgICAgICAgICB2YXIgbGl0ZXJhbCA9IHRva2VuLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbGV4ZXIuY29uc3RydWN0b3IgPT09IFN0cmVhbUxleGVyID8gdG9rZW4udmFsdWUgOiB0b2tlbjtcbiAgICAgICAgICAgIHZhciBzY2FubmFibGUgPSBjb2x1bW4uc2Nhbm5hYmxlO1xuICAgICAgICAgICAgZm9yICh2YXIgdyA9IHNjYW5uYWJsZS5sZW5ndGg7IHctLTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc2Nhbm5hYmxlW3ddO1xuICAgICAgICAgICAgICAgIHZhciBleHBlY3QgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gY29uc3VtZSB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgcmVnZXggb3IgbGl0ZXJhbFxuICAgICAgICAgICAgICAgIGlmIChleHBlY3QudGVzdCA/IGV4cGVjdC50ZXN0KHZhbHVlKSA6XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdC50eXBlID8gZXhwZWN0LnR5cGUgPT09IHRva2VuLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleHBlY3QubGl0ZXJhbCA9PT0gbGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgaXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBzdGF0ZS5uZXh0U3RhdGUoe2RhdGE6IHZhbHVlLCB0b2tlbjogdG9rZW4sIGlzVG9rZW46IHRydWUsIHJlZmVyZW5jZTogbiAtIDF9KTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvbHVtbi5zdGF0ZXMucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5leHQsIGZvciBlYWNoIG9mIHRoZSBydWxlcywgd2UgZWl0aGVyXG4gICAgICAgICAgICAvLyAoYSkgY29tcGxldGUgaXQsIGFuZCB0cnkgdG8gc2VlIGlmIHRoZSByZWZlcmVuY2Ugcm93IGV4cGVjdGVkIHRoYXRcbiAgICAgICAgICAgIC8vICAgICBydWxlXG4gICAgICAgICAgICAvLyAoYikgcHJlZGljdCB0aGUgbmV4dCBub250ZXJtaW5hbCBpdCBleHBlY3RzIGJ5IGFkZGluZyB0aGF0XG4gICAgICAgICAgICAvLyAgICAgbm9udGVybWluYWwncyBzdGFydCBzdGF0ZVxuICAgICAgICAgICAgLy8gVG8gcHJldmVudCBkdXBsaWNhdGlvbiwgd2UgYWxzbyBrZWVwIHRyYWNrIG9mIHJ1bGVzIHdlIGhhdmUgYWxyZWFkeVxuICAgICAgICAgICAgLy8gYWRkZWRcblxuICAgICAgICAgICAgbmV4dENvbHVtbi5wcm9jZXNzKCk7XG5cbiAgICAgICAgICAgIC8vIElmIG5lZWRlZCwgdGhyb3cgYW4gZXJyb3I6XG4gICAgICAgICAgICBpZiAobmV4dENvbHVtbi5zdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gc3RhdGVzIGF0IGFsbCEgVGhpcyBpcyBub3QgZ29vZC5cbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubGV4ZXIuZm9ybWF0RXJyb3IodG9rZW4sIFwiaW52YWxpZCBzeW50YXhcIikgKyBcIlxcblwiO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCJVbmV4cGVjdGVkIFwiICsgKHRva2VuLnR5cGUgPyB0b2tlbi50eXBlICsgXCIgdG9rZW46IFwiIDogXCJcIik7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSArPSBKU09OLnN0cmluZ2lmeSh0b2tlbi52YWx1ZSAhPT0gdW5kZWZpbmVkID8gdG9rZW4udmFsdWUgOiB0b2tlbikgKyBcIlxcblwiO1xuICAgICAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZXJyLm9mZnNldCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICBlcnIudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1heWJlIHNhdmUgbGV4ZXIgc3RhdGVcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMua2VlcEhpc3RvcnkpIHtcbiAgICAgICAgICAgICAgY29sdW1uLmxleGVyU3RhdGUgPSBsZXhlci5zYXZlKClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHVtbikge1xuICAgICAgICAgIHRoaXMubGV4ZXJTdGF0ZSA9IGxleGVyLnNhdmUoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5jcmVtZW50YWxseSBrZWVwIHRyYWNrIG9mIHJlc3VsdHNcbiAgICAgICAgdGhpcy5yZXN1bHRzID0gdGhpcy5maW5pc2goKTtcblxuICAgICAgICAvLyBBbGxvdyBjaGFpbmluZywgZm9yIHdoYXRldmVyIGl0J3Mgd29ydGhcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY29sdW1uID0gdGhpcy50YWJsZVt0aGlzLmN1cnJlbnRdO1xuICAgICAgICBjb2x1bW4ubGV4ZXJTdGF0ZSA9IHRoaXMubGV4ZXJTdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNvbHVtbjtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvbHVtbi5pbmRleDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gaW5kZXg7XG4gICAgICAgIHRoaXMudGFibGVbaW5kZXhdID0gY29sdW1uO1xuICAgICAgICB0aGlzLnRhYmxlLnNwbGljZShpbmRleCArIDEpO1xuICAgICAgICB0aGlzLmxleGVyU3RhdGUgPSBjb2x1bW4ubGV4ZXJTdGF0ZTtcblxuICAgICAgICAvLyBJbmNyZW1lbnRhbGx5IGtlZXAgdHJhY2sgb2YgcmVzdWx0c1xuICAgICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLmZpbmlzaCgpO1xuICAgIH07XG5cbiAgICAvLyBuYi4gZGVwcmVjYXRlZDogdXNlIHNhdmUvcmVzdG9yZSBpbnN0ZWFkIVxuICAgIFBhcnNlci5wcm90b3R5cGUucmV3aW5kID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMua2VlcEhpc3RvcnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0IG9wdGlvbiBga2VlcEhpc3RvcnlgIHRvIGVuYWJsZSByZXdpbmRpbmcnKVxuICAgICAgICB9XG4gICAgICAgIC8vIG5iLiByZWNhbGwgY29sdW1uICh0YWJsZSkgaW5kaWNpZXMgZmFsbCBiZXR3ZWVuIHRva2VuIGluZGljaWVzLlxuICAgICAgICAvLyAgICAgICAgY29sIDAgICAtLSAgIHRva2VuIDAgICAtLSAgIGNvbCAxXG4gICAgICAgIHRoaXMucmVzdG9yZSh0aGlzLnRhYmxlW2luZGV4XSk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgcG9zc2libGUgcGFyc2luZ3NcbiAgICAgICAgdmFyIGNvbnNpZGVyYXRpb25zID0gW107XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuZ3JhbW1hci5zdGFydDtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGVbdGhpcy50YWJsZS5sZW5ndGggLSAxXVxuICAgICAgICBjb2x1bW4uc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIGlmICh0LnJ1bGUubmFtZSA9PT0gc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5kb3QgPT09IHQucnVsZS5zeW1ib2xzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAmJiB0LnJlZmVyZW5jZSA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAmJiB0LmRhdGEgIT09IFBhcnNlci5mYWlsKSB7XG4gICAgICAgICAgICAgICAgY29uc2lkZXJhdGlvbnMucHVzaCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb25zaWRlcmF0aW9ucy5tYXAoZnVuY3Rpb24oYykge3JldHVybiBjLmRhdGE7IH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQYXJzZXI6IFBhcnNlcixcbiAgICAgICAgR3JhbW1hcjogR3JhbW1hcixcbiAgICAgICAgUnVsZTogUnVsZSxcbiAgICB9O1xuXG59KSk7XG4iXX0=
},{}],14:[function(require,module,exports){
"use strict";

function __export(m) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

Object.defineProperty(exports, "__esModule", {
  value: true
});

__export(require("./runtime"));

const std = require("./stdlib");

exports.stdlib = std;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIl9fZXhwb3J0IiwibSIsInAiLCJleHBvcnRzIiwiaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmVxdWlyZSIsInN0ZCIsInN0ZGxpYiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDakIsT0FBSyxJQUFJQyxDQUFULElBQWNELENBQWQsRUFBaUIsSUFBSSxDQUFDRSxPQUFPLENBQUNDLGNBQVIsQ0FBdUJGLENBQXZCLENBQUwsRUFBZ0NDLE9BQU8sQ0FBQ0QsQ0FBRCxDQUFQLEdBQWFELENBQUMsQ0FBQ0MsQ0FBRCxDQUFkO0FBQ3BEOztBQUNERyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JILE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVJLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBUCxRQUFRLENBQUNRLE9BQU8sQ0FBQyxXQUFELENBQVIsQ0FBUjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQW5COztBQUNBTCxPQUFPLENBQUNPLE1BQVIsR0FBaUJELEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQocmVxdWlyZShcIi4vcnVudGltZVwiKSk7XG5jb25zdCBzdGQgPSByZXF1aXJlKFwiLi9zdGRsaWJcIik7XG5leHBvcnRzLnN0ZGxpYiA9IHN0ZDtcbiJdfQ==
},{"./runtime":17,"./stdlib":18}],15:[function(require,module,exports){
"use strict";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

class Context {
  eval(x, ns) {
    return __awaiter(this, void 0, void 0, function* () {
      if (typeof x === "object") {
        if (x.type === "Call") {
          return yield this.call(ns, x.ctx.identifier, ...x.ctx.parameters);
        } else if (x.type === "Get") {
          return this.get(ns, x.ctx.identifier);
        }
      } else {
        return x;
      }
    });
  }

  call(ns, item, ...params) {
    return __awaiter(this, void 0, void 0, function* () {
      const params2 = yield Promise.all(params.map(x => this.eval(x, ns)));
      const ex = this.get(ns, item);

      if (typeof ex === "function") {
        return ex(...params2);
      } else {
        throw new Error("Expected function, received " + typeof ex);
      }
    });
  }

  get(ns, item) {
    const parts = item.split(/\./g);

    if (parts.length === 1) {
      return ns[parts[0]];
    } else {
      let res = ns;

      while (parts.length > 0) {
        const part = parts.splice(0, 1)[0];
        res = this.get(res, part);
      }

      return res;
    }
  }

}

exports.Context = Context;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRleHQuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIkNvbnRleHQiLCJldmFsIiwieCIsIm5zIiwidHlwZSIsImNhbGwiLCJjdHgiLCJpZGVudGlmaWVyIiwicGFyYW1ldGVycyIsImdldCIsIml0ZW0iLCJwYXJhbXMiLCJwYXJhbXMyIiwiYWxsIiwibWFwIiwiZXgiLCJFcnJvciIsInBhcnRzIiwic3BsaXQiLCJsZW5ndGgiLCJyZXMiLCJwYXJ0Iiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksUUFBUSxLQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1C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QUdLO0FBQ0QsVUFBSUcsR0FBRyxHQUFHakIsRUFBVjs7QUFDQSxhQUFPYyxLQUFLLENBQUNFLE1BQU4sR0FBZSxDQUF0QixFQUF5QjtBQUNyQixjQUFNRSxJQUFJLEdBQUdKLEtBQUssQ0FBQ0ssTUFBTixDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsQ0FBYjtBQUNBRixRQUFBQSxHQUFHLEdBQUcsS0FBS1gsR0FBTCxDQUFTVyxHQUFULEVBQWNDLElBQWQsQ0FBTjtBQUNIOztBQUNELGFBQU9ELEdBQVA7QUFDSDtBQUNKOztBQXpDUzs7QUEyQ2RyQixPQUFPLENBQUNDLE9BQVIsR0FBa0JBLE9BQWxCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIENvbnRleHQge1xuICAgIGV2YWwoeCwgbnMpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgeCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmICh4LnR5cGUgPT09IFwiQ2FsbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCB0aGlzLmNhbGwobnMsIHguY3R4LmlkZW50aWZpZXIsIC4uLnguY3R4LnBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh4LnR5cGUgPT09IFwiR2V0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG5zLCB4LmN0eC5pZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNhbGwobnMsIGl0ZW0sIC4uLnBhcmFtcykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zMiA9IHlpZWxkIFByb21pc2UuYWxsKHBhcmFtcy5tYXAoeCA9PiB0aGlzLmV2YWwoeCwgbnMpKSk7XG4gICAgICAgICAgICBjb25zdCBleCA9IHRoaXMuZ2V0KG5zLCBpdGVtKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBleCguLi5wYXJhbXMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIGZ1bmN0aW9uLCByZWNlaXZlZCBcIiArICh0eXBlb2YgZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldChucywgaXRlbSkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IGl0ZW0uc3BsaXQoL1xcLi9nKTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5zW3BhcnRzWzBdXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCByZXMgPSBucztcbiAgICAgICAgICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzLnNwbGljZSgwLCAxKVswXTtcbiAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmdldChyZXMsIHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ29udGV4dCA9IENvbnRleHQ7XG4iXX0=
},{}],16:[function(require,module,exports){
// Generated automatically by nearley, version unknown
// http://github.com/Hardmath123/nearley
(function () {
  function id(x) {
    return x[0];
  }

  const moo = require("moo");

  const lexer = moo.compile({
    number: /[0-9]+/,
    string: /"(?:\\["bfnrt\/\\]|\\u[a-fA-F0-9]{4}|[^"\\])*"/,
    false: /false/,
    true: /true/,
    identifier: /[a-zA-Z]+[a-zA-Z0-9_]*/,
    lbracket: "[",
    rbracket: "]",
    lparen: "(",
    rparen: ")",
    comma: ",",
    period: ".",
    ws: {
      match: /\s+/,
      lineBreaks: true
    }
  });
  var grammar = {
    Lexer: lexer,
    ParserRules: [{
      "name": "FunctionCall",
      "symbols": ["VariableCall", "_", "ParameterList"],
      "postprocess": function (data) {
        return {
          type: "Call",
          ctx: {
            identifier: data[0].ctx.identifier,
            parameters: data[2]
          }
        };
      }
    }, {
      "name": "ParameterList$ebnf$1",
      "symbols": []
    }, {
      "name": "ParameterList$ebnf$1$subexpression$1",
      "symbols": [lexer.has("comma") ? {
        type: "comma"
      } : comma, "Parameter"]
    }, {
      "name": "ParameterList$ebnf$1",
      "symbols": ["ParameterList$ebnf$1", "ParameterList$ebnf$1$subexpression$1"],
      "postprocess": function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      "name": "ParameterList",
      "symbols": [lexer.has("lparen") ? {
        type: "lparen"
      } : lparen, "Parameter", "ParameterList$ebnf$1", lexer.has("rparen") ? {
        type: "rparen"
      } : rparen],
      "postprocess": function (data) {
        const ext_params = data[2].map(x => x[1]);
        return [data[1], ...ext_params];
      }
    }, {
      "name": "Parameter$subexpression$1",
      "symbols": ["Expression"]
    }, {
      "name": "Parameter",
      "symbols": ["Parameter$subexpression$1"],
      "postprocess": function (data) {
        return data[0][0];
      }
    }, {
      "name": "BooleanLiteral$subexpression$1",
      "symbols": [lexer.has("true") ? {
        type: "true"
      } : true]
    }, {
      "name": "BooleanLiteral$subexpression$1",
      "symbols": [lexer.has("false") ? {
        type: "false"
      } : false]
    }, {
      "name": "BooleanLiteral",
      "symbols": ["BooleanLiteral$subexpression$1"],
      "postprocess": function (data) {
        const value = data[0][0].value;
        return Boolean(value);
      }
    }, {
      "name": "NumberLiteral",
      "symbols": [lexer.has("number") ? {
        type: "number"
      } : number],
      "postprocess": function (data) {
        const value = data[0].value;
        return Number(value);
      }
    }, {
      "name": "StringLiteral",
      "symbols": [lexer.has("string") ? {
        type: "string"
      } : string],
      "postprocess": function (data) {
        const raw = data[0].value;
        return raw.substring(1, raw.length - 1);
      }
    }, {
      "name": "Literal$subexpression$1",
      "symbols": ["BooleanLiteral"]
    }, {
      "name": "Literal$subexpression$1",
      "symbols": ["NumberLiteral"]
    }, {
      "name": "Literal$subexpression$1",
      "symbols": ["StringLiteral"]
    }, {
      "name": "Literal",
      "symbols": ["Literal$subexpression$1"],
      "postprocess": function (data) {
        return data[0][0];
      }
    }, {
      "name": "VariableCall",
      "symbols": [lexer.has("lbracket") ? {
        type: "lbracket"
      } : lbracket, "Identifier", lexer.has("rbracket") ? {
        type: "rbracket"
      } : rbracket],
      "postprocess": function (data) {
        return {
          type: "Get",
          ctx: {
            identifier: data[1]
          }
        };
      }
    }, {
      "name": "Chunk",
      "symbols": ["Expression"],
      "postprocess": function (data) {
        return data[0];
      }
    }, {
      "name": "Expression$subexpression$1",
      "symbols": ["FunctionCall"]
    }, {
      "name": "Expression$subexpression$1",
      "symbols": ["Literal"]
    }, {
      "name": "Expression$subexpression$1",
      "symbols": ["VariableCall"]
    }, {
      "name": "Expression",
      "symbols": ["_", "Expression$subexpression$1", "_"],
      "postprocess": function (data) {
        return data[1][0];
      }
    }, {
      "name": "Identifier$ebnf$1",
      "symbols": []
    }, {
      "name": "Identifier$ebnf$1$subexpression$1",
      "symbols": [lexer.has("period") ? {
        type: "period"
      } : period, lexer.has("identifier") ? {
        type: "identifier"
      } : identifier]
    }, {
      "name": "Identifier$ebnf$1",
      "symbols": ["Identifier$ebnf$1", "Identifier$ebnf$1$subexpression$1"],
      "postprocess": function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      "name": "Identifier",
      "symbols": [lexer.has("identifier") ? {
        type: "identifier"
      } : identifier, "Identifier$ebnf$1"],
      "postprocess": function (data) {
        const derefs = (data[1] || []).map(x => x[1].value);
        return [data[0].value, ...derefs].join(".");
      }
    }, {
      "name": "_$ebnf$1",
      "symbols": []
    }, {
      "name": "_$ebnf$1",
      "symbols": ["_$ebnf$1", "__"],
      "postprocess": function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      "name": "_",
      "symbols": ["_$ebnf$1"],
      "postprocess": function (data) {
        return null;
      }
    }, {
      "name": "__$ebnf$1",
      "symbols": [lexer.has("ws") ? {
        type: "ws"
      } : ws]
    }, {
      "name": "__$ebnf$1",
      "symbols": ["__$ebnf$1", lexer.has("ws") ? {
        type: "ws"
      } : ws],
      "postprocess": function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      "name": "__",
      "symbols": ["__$ebnf$1"],
      "postprocess": function (data) {
        return null;
      }
    }],
    ParserStart: "Chunk"
  };

  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = grammar;
  } else {
    window.Grammar = grammar;
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"moo":12}],17:[function(require,module,exports){
"use strict";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const async_mutex_1 = require("async-mutex");

const nearley = require("nearley");

const context_1 = require("./lang/context");

const grammar = nearley.Grammar.fromCompiled(require("./lang/grammar/grammar"));

class Runtime {
  constructor() {
    this.parser = new nearley.Parser(grammar);
    this.ctx = new context_1.Context();
    this.mutex = new async_mutex_1.Mutex();
  }
  /**
   * Evaluates the argument `string` or `FunctionCall` using this `Runtime`'s
   * context and the given `Namespace`, returning the result.
   *
   * @param     {FunctionCall | string} x
   *            The `FunctionCall` token or `string` code to evaluate.
   * @param     {Namespace} ns
   *            The `Namespace` to use.
   * @return    {Promise<Primitive>}
   *            A `Promise` which eventually resolves to the final evaluation.
   */


  eval(x, ns = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      const release = yield this.mutex.acquire();
      const state = this.parser.save();
      this.parser.feed(x);
      this.parser.finish();
      const result = this.parser.results[0];
      this.parser.restore(state);
      release();
      const res = yield this.ctx.eval(result, ns);
      return String(res);
    });
  }

}

exports.Runtime = Runtime;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bnRpbWUuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImFzeW5jX211dGV4XzEiLCJyZXF1aXJlIiwibmVhcmxleSIsImNvbnRleHRfMSIsImdyYW1tYXIiLCJHcmFtbWFyIiwiZnJvbUNvbXBpbGVkIiwiUnVudGltZSIsImNvbnN0cnVjdG9yIiwicGFyc2VyIiwiUGFyc2VyIiwiY3R4IiwiQ29udGV4dCIsIm11dGV4IiwiTXV0ZXgiLCJldmFsIiwieCIsIm5zIiwicmVsZWFzZSIsImFjcXVpcmUiLCJzdGF0ZSIsInNhdmUiLCJmZWVkIiwiZmluaXNoIiwicmVzdWx0cyIsInJlc3RvcmUiLCJyZXMiLCJTdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxRQUFRLEtBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIsVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkQsYUFBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxJQUFWLENBQWVGLEtBQWYsQ0FBRCxDQUFKO0FBQThCLE9BQXBDLENBQXFDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzNGLGFBQVNDLFFBQVQsQ0FBa0JKLEtBQWxCLEVBQXlCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQyxPQUFELENBQVQsQ0FBbUJLLEtBQW5CLENBQUQsQ0FBSjtBQUFrQyxPQUF4QyxDQUF5QyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUM5RixhQUFTRixJQUFULENBQWNJLE1BQWQsRUFBc0I7QUFBRUEsTUFBQUEsTUFBTSxDQUFDQyxJQUFQLEdBQWNULE9BQU8sQ0FBQ1EsTUFBTSxDQUFDTCxLQUFSLENBQXJCLEdBQXNDLElBQUlOLENBQUosQ0FBTSxVQUFVRyxPQUFWLEVBQW1CO0FBQUVBLFFBQUFBLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDTCxLQUFSLENBQVA7QUFBd0IsT0FBbkQsRUFBcURPLElBQXJELENBQTBEUixTQUExRCxFQUFxRUssUUFBckUsQ0FBdEM7QUFBdUg7O0FBQy9JSCxJQUFBQSxJQUFJLENBQUMsQ0FBQ04sU0FBUyxHQUFHQSxTQUFTLENBQUNhLEtBQVYsQ0FBZ0JoQixPQUFoQixFQUF5QkMsVUFBVSxJQUFJLEVBQXZDLENBQWIsRUFBeURTLElBQXpELEVBQUQsQ0FBSjtBQUNILEdBTE0sQ0FBUDtBQU1ILENBUEQ7O0FBUUFPLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRVgsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTVksYUFBYSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUE3Qjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1FLFNBQVMsR0FBR0YsT0FBTyxDQUFDLGdCQUFELENBQXpCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0YsT0FBTyxDQUFDRyxPQUFSLENBQWdCQyxZQUFoQixDQUE2QkwsT0FBTyxDQUFDLHdCQUFELENBQXBDLENBQWhCOztBQUNBLE1BQU1NLE9BQU4sQ0FBYztBQUNWQyxFQUFBQSxXQUFXLEdBQUc7QUFDVixTQUFLQyxNQUFMLEdBQWMsSUFBSVAsT0FBTyxDQUFDUSxNQUFaLENBQW1CTixPQUFuQixDQUFkO0FBQ0EsU0FBS08sR0FBTCxHQUFXLElBQUlSLFNBQVMsQ0FBQ1MsT0FBZCxFQUFYO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLElBQUliLGFBQWEsQ0FBQ2MsS0FBbEIsRUFBYjtBQUNIO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7QUFXQUMsRUFBQUEsSUFBSSxDQUFDQyxDQUFELEVBQUlDLEVBQUUsR0FBRyxFQUFULEVBQWE7QUFDYixXQUFPdEMsU0FBUyxDQUFDLElBQUQsRUFBTyxLQUFLLENBQVosRUFBZSxLQUFLLENBQXBCLEVBQXVCLGFBQWE7QUFDaEQsWUFBTXVDLE9BQU8sR0FBRyxNQUFNLEtBQUtMLEtBQUwsQ0FBV00sT0FBWCxFQUF0QjtBQUNBLFlBQU1DLEtBQUssR0FBRyxLQUFLWCxNQUFMLENBQVlZLElBQVosRUFBZDtBQUNBLFdBQUtaLE1BQUwsQ0FBWWEsSUFBWixDQUFpQk4sQ0FBakI7QUFDQSxXQUFLUCxNQUFMLENBQVljLE1BQVo7QUFDQSxZQUFNOUIsTUFBTSxHQUFHLEtBQUtnQixNQUFMLENBQVllLE9BQVosQ0FBb0IsQ0FBcEIsQ0FBZjtBQUNBLFdBQUtmLE1BQUwsQ0FBWWdCLE9BQVosQ0FBb0JMLEtBQXBCO0FBQ0FGLE1BQUFBLE9BQU87QUFDUCxZQUFNUSxHQUFHLEdBQUcsTUFBTSxLQUFLZixHQUFMLENBQVNJLElBQVQsQ0FBY3RCLE1BQWQsRUFBc0J3QixFQUF0QixDQUFsQjtBQUNBLGFBQU9VLE1BQU0sQ0FBQ0QsR0FBRCxDQUFiO0FBQ0gsS0FWZSxDQUFoQjtBQVdIOztBQTdCUzs7QUErQmQzQixPQUFPLENBQUNRLE9BQVIsR0FBa0JBLE9BQWxCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFzeW5jX211dGV4XzEgPSByZXF1aXJlKFwiYXN5bmMtbXV0ZXhcIik7XG5jb25zdCBuZWFybGV5ID0gcmVxdWlyZShcIm5lYXJsZXlcIik7XG5jb25zdCBjb250ZXh0XzEgPSByZXF1aXJlKFwiLi9sYW5nL2NvbnRleHRcIik7XG5jb25zdCBncmFtbWFyID0gbmVhcmxleS5HcmFtbWFyLmZyb21Db21waWxlZChyZXF1aXJlKFwiLi9sYW5nL2dyYW1tYXIvZ3JhbW1hclwiKSk7XG5jbGFzcyBSdW50aW1lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBuZXcgbmVhcmxleS5QYXJzZXIoZ3JhbW1hcik7XG4gICAgICAgIHRoaXMuY3R4ID0gbmV3IGNvbnRleHRfMS5Db250ZXh0KCk7XG4gICAgICAgIHRoaXMubXV0ZXggPSBuZXcgYXN5bmNfbXV0ZXhfMS5NdXRleCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFdmFsdWF0ZXMgdGhlIGFyZ3VtZW50IGBzdHJpbmdgIG9yIGBGdW5jdGlvbkNhbGxgIHVzaW5nIHRoaXMgYFJ1bnRpbWVgJ3NcbiAgICAgKiBjb250ZXh0IGFuZCB0aGUgZ2l2ZW4gYE5hbWVzcGFjZWAsIHJldHVybmluZyB0aGUgcmVzdWx0LlxuICAgICAqXG4gICAgICogQHBhcmFtICAgICB7RnVuY3Rpb25DYWxsIHwgc3RyaW5nfSB4XG4gICAgICogICAgICAgICAgICBUaGUgYEZ1bmN0aW9uQ2FsbGAgdG9rZW4gb3IgYHN0cmluZ2AgY29kZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0gICAgIHtOYW1lc3BhY2V9IG5zXG4gICAgICogICAgICAgICAgICBUaGUgYE5hbWVzcGFjZWAgdG8gdXNlLlxuICAgICAqIEByZXR1cm4gICAge1Byb21pc2U8UHJpbWl0aXZlPn1cbiAgICAgKiAgICAgICAgICAgIEEgYFByb21pc2VgIHdoaWNoIGV2ZW50dWFsbHkgcmVzb2x2ZXMgdG8gdGhlIGZpbmFsIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgZXZhbCh4LCBucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCByZWxlYXNlID0geWllbGQgdGhpcy5tdXRleC5hY3F1aXJlKCk7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGFyc2VyLnNhdmUoKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VyLmZlZWQoeCk7XG4gICAgICAgICAgICB0aGlzLnBhcnNlci5maW5pc2goKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGFyc2VyLnJlc3VsdHNbMF07XG4gICAgICAgICAgICB0aGlzLnBhcnNlci5yZXN0b3JlKHN0YXRlKTtcbiAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHlpZWxkIHRoaXMuY3R4LmV2YWwocmVzdWx0LCBucyk7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKHJlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVudGltZSA9IFJ1bnRpbWU7XG4iXX0=
},{"./lang/context":15,"./lang/grammar/grammar":16,"async-mutex":3,"nearley":13}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const chalk_1 = require("chalk");

exports.Chalk = chalk_1.default;

function concat(...args) {
  return args.join("");
}

exports.concat = concat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2hhbGtfMSIsInJlcXVpcmUiLCJDaGFsayIsImRlZmF1bHQiLCJjb25jYXQiLCJhcmdzIiwiam9pbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUF2Qjs7QUFDQUgsT0FBTyxDQUFDSSxLQUFSLEdBQWdCRixPQUFPLENBQUNHLE9BQXhCOztBQUNBLFNBQVNDLE1BQVQsQ0FBZ0IsR0FBR0MsSUFBbkIsRUFBeUI7QUFDckIsU0FBT0EsSUFBSSxDQUFDQyxJQUFMLENBQVUsRUFBVixDQUFQO0FBQ0g7O0FBQ0RSLE9BQU8sQ0FBQ00sTUFBUixHQUFpQkEsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNoYWxrXzEgPSByZXF1aXJlKFwiY2hhbGtcIik7XG5leHBvcnRzLkNoYWxrID0gY2hhbGtfMS5kZWZhdWx0O1xuZnVuY3Rpb24gY29uY2F0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5qb2luKFwiXCIpO1xufVxuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQ7XG4iXX0=
},{"chalk":4}],19:[function(require,module,exports){
'use strict';

module.exports = {
  stdout: false,
  stderr: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInN0ZG91dCIsInN0ZGVyciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNoQkMsRUFBQUEsTUFBTSxFQUFFLEtBRFE7QUFFaEJDLEVBQUFBLE1BQU0sRUFBRTtBQUZRLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHN0ZG91dDogZmFsc2UsXG5cdHN0ZGVycjogZmFsc2Vcbn07XG4iXX0=
},{}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var signtext = require("signtext");

(function () {
  function getPlayground() {
    return {
      input_javascript: playground_input_js.value,
      input_signtext: playground_input_st.value,
      namespace: eval("(".concat(playground_input_js.value, ")"))
    };
  }

  var playground_input_st = document.getElementById("playground-st-code");
  var playground_input_js = document.getElementById("playground-js-code");
  var playground_output = document.getElementById("playground-output");
  var rt = new signtext.Runtime();
  document.getElementById("playground").addEventListener("submit", function (ev) {
    ev.preventDefault();
    var pg = getPlayground();
    rt.eval(pg.input_signtext, pg.namespace).catch(function (err) {
      return err;
    }).then(function (x) {
      return playground_output.innerText = x;
    });
    return false;
  });
  playground_input_st.value = "[concat](\"Hello\", \" \", [name], \"!\")";
  playground_input_js.value = "\n{\n  concat(...x) {\n    return x.join(\"\");\n  },\n  name: \"world\"\n}\n  ".trim();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfNDBmMWJjZWUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzaWdudGV4dCIsInJlcXVpcmUiLCJnZXRQbGF5Z3JvdW5kIiwiaW5wdXRfamF2YXNjcmlwdCIsInBsYXlncm91bmRfaW5wdXRfanMiLCJpbnB1dF9zaWdudGV4dCIsInBsYXlncm91bmRfaW5wdXRfc3QiLCJuYW1lc3BhY2UiLCJldmFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInBsYXlncm91bmRfb3V0cHV0IiwicnQiLCJSdW50aW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwicHJldmVudERlZmF1bHQiLCJwZyIsImNhdGNoIiwiZXJyIiwidGhlbiIsIngiLCJpbm5lclRleHQiLCJ0cmltIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxJQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXhCOztBQUNBLENBQUMsWUFBWTtBQUNULFdBQVNDLGFBQVQsR0FBeUI7QUFDckIsV0FBUTtBQUNKQyxNQUFBQSxnQkFBZ0IsRUFBRUMsbUJBQW1CLENBQUNMLEtBRGxDO0FBRUpNLE1BQUFBLGNBQWMsRUFBRUMsbUJBQW1CLENBQUNQLEtBRmhDO0FBR0pRLE1BQUFBLFNBQVMsRUFBRUMsSUFBSSxZQUFLSixtQkFBbUIsQ0FBQ0wsS0FBekI7QUFIWCxLQUFSO0FBS0g7O0FBQ0QsTUFBTU8sbUJBQW1CLEdBQUdHLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixvQkFBeEIsQ0FBNUI7QUFDQSxNQUFNTixtQkFBbUIsR0FBR0ssUUFBUSxDQUFDQyxjQUFULENBQXdCLG9CQUF4QixDQUE1QjtBQUNBLE1BQU1DLGlCQUFpQixHQUFHRixRQUFRLENBQUNDLGNBQVQsQ0FBd0IsbUJBQXhCLENBQTFCO0FBQ0EsTUFBTUUsRUFBRSxHQUFHLElBQUlaLFFBQVEsQ0FBQ2EsT0FBYixFQUFYO0FBQ0FKLEVBQUFBLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixZQUF4QixFQUFzQ0ksZ0JBQXRDLENBQXVELFFBQXZELEVBQWlFLFVBQVVDLEVBQVYsRUFBYztBQUMzRUEsSUFBQUEsRUFBRSxDQUFDQyxjQUFIO0FBQ0EsUUFBTUMsRUFBRSxHQUFHZixhQUFhLEVBQXhCO0FBQ0FVLElBQUFBLEVBQUUsQ0FBQ0osSUFBSCxDQUFRUyxFQUFFLENBQUNaLGNBQVgsRUFBMkJZLEVBQUUsQ0FBQ1YsU0FBOUIsRUFDS1csS0FETCxDQUNXLFVBQUNDLEdBQUQ7QUFBQSxhQUFTQSxHQUFUO0FBQUEsS0FEWCxFQUVLQyxJQUZMLENBRVUsVUFBQ0MsQ0FBRDtBQUFBLGFBQU9WLGlCQUFpQixDQUFDVyxTQUFsQixHQUE4QkQsQ0FBckM7QUFBQSxLQUZWO0FBR0EsV0FBTyxLQUFQO0FBQ0gsR0FQRDtBQVFBZixFQUFBQSxtQkFBbUIsQ0FBQ1AsS0FBcEI7QUFDQUssRUFBQUEsbUJBQW1CLENBQUNMLEtBQXBCLEdBQTRCLGtGQU81QndCLElBUDRCLEVBQTVCO0FBUUgsQ0E3QkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNpZ250ZXh0ID0gcmVxdWlyZShcInNpZ250ZXh0XCIpO1xuKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBnZXRQbGF5Z3JvdW5kKCkge1xuICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgIGlucHV0X2phdmFzY3JpcHQ6IHBsYXlncm91bmRfaW5wdXRfanMudmFsdWUsXG4gICAgICAgICAgICBpbnB1dF9zaWdudGV4dDogcGxheWdyb3VuZF9pbnB1dF9zdC52YWx1ZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogZXZhbChgKCR7cGxheWdyb3VuZF9pbnB1dF9qcy52YWx1ZX0pYClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHBsYXlncm91bmRfaW5wdXRfc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlncm91bmQtc3QtY29kZVwiKTtcbiAgICBjb25zdCBwbGF5Z3JvdW5kX2lucHV0X2pzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLWpzLWNvZGVcIik7XG4gICAgY29uc3QgcGxheWdyb3VuZF9vdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlncm91bmQtb3V0cHV0XCIpO1xuICAgIGNvbnN0IHJ0ID0gbmV3IHNpZ250ZXh0LlJ1bnRpbWUoKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlncm91bmRcIikuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgcGcgPSBnZXRQbGF5Z3JvdW5kKCk7XG4gICAgICAgIHJ0LmV2YWwocGcuaW5wdXRfc2lnbnRleHQsIHBnLm5hbWVzcGFjZSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBlcnIpXG4gICAgICAgICAgICAudGhlbigoeCkgPT4gcGxheWdyb3VuZF9vdXRwdXQuaW5uZXJUZXh0ID0geCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICBwbGF5Z3JvdW5kX2lucHV0X3N0LnZhbHVlID0gYFtjb25jYXRdKFwiSGVsbG9cIiwgXCIgXCIsIFtuYW1lXSwgXCIhXCIpYDtcbiAgICBwbGF5Z3JvdW5kX2lucHV0X2pzLnZhbHVlID0gYFxue1xuICBjb25jYXQoLi4ueCkge1xuICAgIHJldHVybiB4LmpvaW4oXCJcIik7XG4gIH0sXG4gIG5hbWU6IFwid29ybGRcIlxufVxuICBgLnRyaW0oKTtcbn0pKCk7XG4iXX0=
},{"signtext":14}]},{},[20])